(ns flutter-cljd.utils
  "Core utilities and helpers for flutter-cljd."
  (:require
   ["package:flutter/widgets.dart" :as w]))

(defmacro ??
  "A nil-coalescing macro that returns the first non-nil value from a series of expressions.
    
    Similar to `or`, but with a key difference: `??` only treats `nil` as a 'falsy' value, 
    whereas `or` treats both `nil` and `false` as 'falsy'. This makes `??` useful in cases where 
    `false` should be preserved as a valid return value.
  
    ### Usage
    - `(?? expr1 expr2 expr3 ...)` evaluates each expression in sequence until a non-nil value is found.
    - If `expr1` is non-nil, it is returned immediately, without evaluating `expr2` or `expr3`.
    - If all expressions are `nil`, the macro returns `nil`.
  
    ### Examples
  
    ```clojure
    ;; Returns the first non-nil value, which is 42
    (?? nil nil 42) ; => 42
  
    ;; If no non-nil values are found, returns nil
    (?? nil nil nil) ; => nil
  
    ;; Works with expressions and functions that return nil or non-nil values
    (?? (get {:a 1} :b) (get {:a 1} :a) (println \"Fallback\")) ; => 1
  
    ;; Unlike `or`, preserves `false` as a valid result
    (?? nil false 42) ; => false
    (or nil false 42) ; => 42
  
    ;; Stops evaluating as soon as a non-nil value is found
    (?? nil (do (println \"This is evaluated\") 2) 3) ; Prints 'This is evaluated' and returns 2
    ```"
  {:clj-kondo/lint-as 'clojure.core/or}
  ([] `nil)
  ([x] x)
  ([x & next]
   (reduce (fn [acc val]
             `(let [value# ~val]
                (if (some? value#)
                  value#
                  ~acc)))
           `nil
           (reverse (cons x next)))))

(def π
  "The mathematical constant `π` (pi), which is the ratio of a circle's circumference to its diameter."
  (.pi double))

(defn lerp 
  ([from to t] 
   ((lerp from to) t))
  ([from to]
   (cond
    ;; (satisfies? from f/ITweenable)
    ;; (f/lerp from to)
     
     (and (number? from) (number? to))
     #(+ (* (- 1 %) from) (* % to))

     (and (vector? from) (vector? to))
     (fn [t] (mapv #((lerp %1 %2) t) from to))

     (and (seq? from) (seq? to))
     (fn [t] (map #((lerp %1 %2) t) from to))

     (and (map? from) (map? to))
     (fn [t] (reduce-kv (fn [acc k v] 
                          (assoc acc k ((lerp (get from k) v) t))) 
                        {} 
                        to))
     
     :else
     #(if (> % 0.5) to from))))

(defn flatten-children [children]
  (filter #(instance? w/Widget %) (flatten children)))

(defn args-children [args children]
  [(if (map? args) args {})
   (flatten-children (if (map? args) children (cons args children)))])
