(ns flutter-cljd.utils
  "Core utilities and helpers for flutter-cljd."
  (:require
   [cljd.flutter :as f]
   ["package:flutter/widgets.dart" :as w]))

(defmacro ??
  "A nil-coalescing macro that returns the first non-nil value from a series of expressions.
    
    Similar to `or`, but with a key difference: `??` only treats `nil` as a 'falsy' value, 
    whereas `or` treats both `nil` and `false` as 'falsy'. This makes `??` useful in cases where 
    `false` should be preserved as a valid return value.
  
    ### Usage
    - `(?? expr1 expr2 expr3 ...)` evaluates each expression in sequence until a non-nil value is found.
    - If `expr1` is non-nil, it is returned immediately, without evaluating `expr2` or `expr3`.
    - If all expressions are `nil`, the macro returns `nil`.
  
    ### Examples
  
    ```clojure
    ;; Returns the first non-nil value, which is 42
    (?? nil nil 42) ; => 42
  
    ;; If no non-nil values are found, returns nil
    (?? nil nil nil) ; => nil
  
    ;; Works with expressions and functions that return nil or non-nil values
    (?? (get {:a 1} :b) (get {:a 1} :a) (println \"Fallback\")) ; => 1
  
    ;; Unlike `or`, preserves `false` as a valid result
    (?? nil false 42) ; => false
    (or nil false 42) ; => 42
  
    ;; Stops evaluating as soon as a non-nil value is found
    (?? nil (do (println \"This is evaluated\") 2) 3) ; Prints 'This is evaluated' and returns 2
    ```"
  {:clj-kondo/lint-as 'clojure.core/or}
  ([] `nil)
  ([x] x)
  ([x & next]
   (reduce (fn [acc val]
             `(let [value# ~val]
                (if (some? value#)
                  value#
                  ~acc)))
           `nil
           (reverse (cons x next)))))

(def π
  "The mathematical constant `π` (pi), which is the ratio of a circle's circumference to its diameter."
  (.pi double))

(extend-protocol f/ITweenable
  w/Offset
  (-tween [end]
    (f/tween-with
     (fn [begin end]
       (fn [t] (w/Offset.lerp begin end t)))
     end))

  w/Shadow
  (-tween [end]
    (f/tween-with
     (fn [begin end]
       (fn [t] (w/Shadow.lerp begin end t)))
     end))

  w/BoxShadow
  (-tween [end]
    (f/tween-with
     (fn [begin end]
       (fn [t] (w/BoxShadow.lerp begin end t)))
     end)))

(defn int-lerp
  "Linear interpolation between two integers.
   
   Takes two integers and returns a function that interpolates between them based on a parameter t between 0 and 1.
   
   Args:
    - from: The starting integer
    - to: The ending integer 
    - t: The interpolation parameter between 0 and 1
   
   Returns:
    The interpolated integer
   
   Example:
   ```clojure
   (int-lerp 0 10 0.5) ; => 5
   ```"
  ([from to t]
   (.round (+ (* (- 1 t) from) (* t to))))
  ([from to]
   (fn [t] (int-lerp from to t))))

(defn lerp
  "Linear interpolation between two values.
   
   Takes two values and returns a function that interpolates between them based on a parameter t between 0 and 1.
   Can interpolate between numbers, vectors, sequences, and maps.
   
   Args:
    - from: The starting value
    - to: The ending value 
    - t: (optional) The interpolation parameter between 0 and 1
   
   Returns:
    If t is provided: The interpolated value
    If t is not provided: A function that takes t and returns the interpolated value
   
   Examples:
   ```clojure
   ;; Numbers
   ((lerp 0 10) 0.5) ; => 5
   (lerp 0 10 0.5)   ; => 5
   
   ;; Vectors
   ((lerp [0 0] [10 10]) 0.5)  ; => [5 5]
   
   ;; Maps
   ((lerp {:x 0} {:x 10}) 0.5) ; => {:x 5}
   ```"
  ([from to t]
   ((lerp from to) t))
  ([from to]
   (cond
     (and (number? from) (number? to))
     #(+ (* (- 1 %) (double from)) (* % (double to)))

     (satisfies? f/ITweenable from)
     (f/lerp from to)

     (and (vector? from) (vector? to) (= (count from) (count to)))
     (fn [t] (mapv #((lerp %1 %2) t) from to))

     (and (map? from) (map? to))
     (fn [t]
       (let [all-keys (set (concat (keys from) (keys to)))]
         (reduce (fn [acc k]
                   (cond
                        ;; Key exists in both maps - interpolate
                     (and (contains? from k) (contains? to k))
                     (assoc acc k ((lerp (get from k) (get to k)) t))

                        ;; Key only in 'from' - keep if t < 0.5
                     (contains? from k)
                     (if (< t 0.5)
                       (assoc acc k (get from k))
                       acc)

                        ;; Key only in 'to' - keep if t >= 0.5
                     :else
                     (if (>= t 0.5)
                       (assoc acc k (get to k))
                       acc)))
                 {}
                 all-keys)))

     :else
     #(if (> % 0.5) to from))))

(defn flatten-children
  "Flattens a nested collection of children and filters out non-Widget elements.
   
   Used internally by widget functions to handle nested collections of children.
   
   Args:
    - children: A collection that may contain widgets and nested collections
   
   Returns:
    A flat sequence containing only Widget instances
   
   Example:
   ```clojure
   (flatten-children [[button1 button2] text1 [text2]])
   ; => [button1 button2 text1 text2]
   ```"
  [children]
  (filter #(instance? w/Widget %) (flatten children)))

(defn args-children
  "Processes arguments and children for widget functions that accept both options and children.
   
   Used internally by widget functions to handle flexible argument patterns where the first argument
   can either be a map of options or a child widget.
   
   Args:
    - args: Either a map of options or the first child widget
    - children: Sequence of child widgets (may be empty if args is a child)
   
   Returns:
    A vector containing:
    - A map of processed arguments (empty if args was a child)
    - A flattened sequence of Widget children
   
   Example:
   ```clojure
   ;; With options map
   (args-children {:color :red} [child1 child2])
   ; => [{:color :red} [child1 child2]]
   
   ;; Without options map
   (args-children first-child [child2 child3])
   ; => [{} [first-child child2 child3]]
   ```"
  ([args children]
   [(if (map? args) args {})
    (flatten-children (if (map? args) children (cons args children)))]))

(defn key-values-args-and-children [values]
  (if (map? (first values))
    (args-children (first values) (rest values))
    (let [{:keys [args i]} (reduce
                                (fn [{:keys [args key i]} v]
                                  (cond
                                    (and (even? i) (keyword? v))
                                    {:args args :key v :i (inc i)}
                                    (and (odd? i) (some? key))
                                    {:args (assoc args key v) :i (inc i)}
                                    :else
                                    (reduced {:args args :i i})))
                                {:args {} :i 0}
                                values)]
      (args-children args (vec (drop i values))))))

(defn key-values-map [values]
  (if (= 1 (count values)) (first values) (apply hash-map values)))

(defmacro dbg
  "Prints variable names and their values.
    
    ```clojure
    (let [x 10 y 20]
      (dbg x y))
    ;; Output: x: 10 y: 20
   ```"
  [& vars]
  `(println ~@(map (fn [v] `(str '~v ": " (if (nil? ~v) "nil" ~v))) vars)))
