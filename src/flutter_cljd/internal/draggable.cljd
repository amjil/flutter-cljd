(ns flutter-cljd.internal.draggable
  (:require
   [flutter-cljd.types :as t]
   ["dart:core" :as core]
   ["package:flutter/painting.dart" :as p]
   ["package:flutter/rendering.dart" :as r]
   ["package:flutter/widgets.dart" :as w]
   ["package:flutter/animation.dart" :as a]
   ["package:flutter/gestures.dart" :as g]
   ["package:flutter/services.dart" :as s]))

(declare DraggableState)
(declare DragAvatar)
(declare DragTarget)
(declare DragTargetState)

;; Draggable widget
(deftype Draggable [^w/Key? k
                    ^core/Duration? delay
                    feedback
                    data
                    ^p/Axis? axis
                    ^w/Widget? childWhenDragging
                    ^w/Offset feedbackOffset
                    dragAnchorStrategy
                    ^p/Axis? affinity
                    ^int? maxSimultaneousDrags
                    onDragStarted
                    onDragUpdate
                    onDragWillEnd
                    onDragEnd
                    ^bool hapticFeedbackOnStart
                    ^bool ignoringFeedbackSemantics
                    ^bool ignoringFeedbackPointer
                    ^bool rootOverlay
                    ^w/HitTestBehavior hitTestBehavior
                    allowedButtonsFilter
                    ^w/Widget child]
  :extends (w/StatefulWidget .key k)

  (createState [^Draggable _] (DraggableState nil 0 w/Offset.zero nil))

   ;; Creates a gesture recognizer that recognizes the start of the drag  
  Draggable
  (^g/GestureRecognizer createRecognizer [^Draggable this onStart]
    (let [allowed-buttons-filter (.-allowedButtonsFilter this)
          ^core/Duration? delay (.-delay this)
          ^g/GestureRecognizer recognizer (cond
                                            (some-> delay (.> core/Duration.zero))
                                            (g/DelayedMultiDragGestureRecognizer .delay delay .allowedButtonsFilter allowed-buttons-filter)

                                            (= (.-affinity this) w/Axis.horizontal)
                                            (g/HorizontalMultiDragGestureRecognizer .allowedButtonsFilter allowed-buttons-filter)

                                            (= (.-affinity this) w/Axis.vertical)
                                            (g/VerticalMultiDragGestureRecognizer .allowedButtonsFilter allowed-buttons-filter)

                                            :else
                                            (g/ImmediateMultiDragGestureRecognizer .allowedButtonsFilter allowed-buttons-filter))]
      (set! (.-onStart recognizer)
            (fn [position]
              (let [^g/Drag? result (onStart position)]
                (when (and result (.-hapticFeedbackOnStart this))
                  (s/HapticFeedback.selectionClick))
                result)))
      recognizer)))

;; Child drag anchor strategy
(defn child-drag-anchor-strategy [^Draggable _ ^w/BuildContext context ^w/Offset position]
  (let [^w/RenderBox render-object (.findRenderObject context)]
    (.globalToLocal render-object position)))

;; Pointer drag anchor strategy
(defn pointer-drag-anchor-strategy [^Draggable _ ^w/BuildContext _ ^w/Offset _] w/Offset.zero)

;; DraggableState class
(deftype DraggableState [^:mutable ^g/GestureRecognizer? recognizer
                         ^:mutable ^int activeCount
                         ^:mutable ^w/Offset offset
                         ^:mutable ^a/Tween? tween]
  :extends (#/(w/State Draggable))

  ^:mixin #/(w/TickerProviderStateMixin Draggable)
  (initState [^DraggableState this]
    (.initState ^super this)
    (set! (.-recognizer this) (.createRecognizer (.-widget this) #(.startDrag this %)))
    nil)

  (dispose [^DraggableState this]
    (.disposeRecognizerIfInactive this)
    (.dispose ^super this))

  (didChangeDependencies [^DraggableState this]
    (set! (.-gestureSettings recognizer)
          (w/MediaQuery.maybeGestureSettingsOf (.-context this)))
    (.didChangeDependencies ^super this))

  ;; Build method
  (^w/Widget build [^DraggableState this ^w/BuildContext context]
    (assert (w/debugCheckHasOverlay context))
    (let [^int activeCount (.-activeCount this)
          ^Draggable widget (.-widget this)
          ^bool can-drag (or (nil? (.-maxSimultaneousDrags widget)) (< activeCount (.-maxSimultaneousDrags widget)))
          ^bool show-child (zero? activeCount)
          ^w/Size? size (some-> context .findRenderObject .-size)]
      (w/Transform.translate
       .offset (-> this .-offset)
       .child (w/Listener
               .behavior (.-hitTestBehavior widget)
               .onPointerDown (when can-drag #(.routePointer this %))
               .child (if show-child
                        (.-child widget)
                        (or (.-childWhenDragging widget) (w/SizedBox.fromSize .size size)))))))

  (setState [^DraggableState this modify]
    (if (.-mounted this)
      (.setState ^super this (fn [] (modify) nil))
      (modify)))

  DraggableState
  (disposeRecognizerIfInactive [^DraggableState this]
    (when (and (.-recognizer this) (<= (.-activeCount this) 0))
      (-> this .-recognizer .dispose)
      (set! (.-recognizer this) nil)))

    ;; Route pointer event to recognizer
  (routePointer [^DraggableState this ^g/PointerDownEvent event]
    (let [^Draggable widget (.-widget this)]
      (when (or (nil? (.-maxSimultaneousDrags widget))
                (< (.-activeCount this) (.-maxSimultaneousDrags widget)))
        (.addPointer (.-recognizer this) event))))

    ;; Start drag handling
  (startDrag [^DraggableState this ^w/Offset position]
    (let [^Draggable widget (.-widget this)]
      (when (or (nil? (.-maxSimultaneousDrags widget))
                (< activeCount (.-maxSimultaneousDrags widget)))
        (let [^w/Offset drag-start-point ((.-dragAnchorStrategy widget) widget (.-context this) position)
              _ (.setState this #(set! (.-activeCount this) (inc (.-activeCount this))))
              ^w/Widget feedback (if (instance? w/Widget (.-feedback widget))
                                   (.-feedback widget)
                                   ((.-feedback widget) (.-child widget)))
              ^DragAvatar avatar (DragAvatar
                                  (w/Overlay.of
                                   (.-context this)
                                   .debugRequiredFor widget
                                   .rootOverlay (.-rootOverlay widget))
                                  (.-data widget)
                                  (.-axis widget)
                                  (.+ position (.-offset this))
                                  drag-start-point
                                  feedback
                                  (.-feedbackOffset widget)
                                  (fn [details ^w/Offset offset]
                                    (when (and (.-mounted this) (.-onDragUpdate widget))
                                      ((.-onDragUpdate widget) details)))
                                  (fn [^w/Velocity velocity ^w/Offset offset ^w/Offset final-offset ^bool was-accepted]
                                    (.willEndDrag this velocity offset final-offset was-accepted))
                                  (fn [^w/Velocity velocity ^w/Offset offset ^bool was-accepted]
                                    (.didEndDrag this velocity offset was-accepted))
                                  (.-ignoringFeedbackSemantics widget)
                                  (.-ignoringFeedbackPointer widget)
                                  (-> this .-context w/View.of .-viewId)
                                  nil
                                  []
                                  w/Offset.zero
                                  nil
                                  w/Offset.zero
                                  w/Offset.zero
                                  nil
                                  nil
                                  (.-context this)
                                  (a/AnimationController .vsync this))]
          (.prepare avatar)
          (when-let [on-drag-started (.-onDragStarted widget)]
            (on-drag-started))
          avatar))))

  (willEndDrag [^DraggableState this
                ^w/Velocity velocity
                ^w/Offset offset
                ^w/Offset final-offset
                ^bool was-accepted]
    (when (and (.-mounted this) (.-onDragWillEnd (.-widget this)))
      ((.-onDragWillEnd (.-widget this))
       {:was-accepted was-accepted
        :velocity velocity
        :offset offset})))

  (didEndDrag [^DraggableState this
               ^w/Velocity velocity
               ^w/Offset offset
               ^bool was-accepted]
    (.setState this (fn []
                      (.-offset! this offset)
                      (.-activeCount! this (dec (.-activeCount this)))))
    (when-not (.-mounted this)
      (.disposeRecognizerIfInactive this))
    (when (and (.-mounted this) (.-onDragEnd (.-widget this)))
      ((.-onDragEnd (.-widget this))
       {:was-accepted was-accepted
        :velocity velocity
        :offset offset}))))

(deftype DragAvatar [^w/OverlayState overlayState
                     data
                     ^p/Axis? axis
                     ^w/Offset initialPosition
                     ^w/Offset dragStartPoint
                     ^w/Widget? feedback
                     ^w/Offset feedbackOffset
                     onDragUpdate
                     onDragWillEnd
                     onDragEnd
                     ^bool ignoringFeedbackSemantics
                     ^bool ignoringFeedbackPointer
                     ^int viewId
                     ^:mutable activeTarget
                     ^:mutable enteredTargets
                     ^:mutable ^w/Offset position
                     ^:mutable ^w/Offset? lastOffset
                     ^:mutable ^w/Offset finalOffset
                     ^:mutable ^w/Offset overlayOffset
                     ^:mutable ^w/OverlayEntry? entry
                     ^:mutable ^w/BuildContext? context
                     ^:mutable ^w/BuildContext originalContext
                     ^:mutable ^a/AnimationController controller]
  :extends g/Drag

  (update [^DragAvatar this ^g/DragUpdateDetails details]
    (let [old-position (.-position this)
          new-position (.+ old-position (.restrictAxis this (.-delta details)))]
      (.updateDrag this new-position details)))

  (end [^DragAvatar this ^g/DragEndDetails details]
    (.finishDrag this :dropped (.restrictVelocityAxis this (.-velocity details))))

  (cancel [this]
    (.finishDrag this :canceled nil))

  DragAvatar
  (prepare [^DragAvatar this]
    (let [entry (w/OverlayEntry .builder #(.buildWidget this %))]
      (set! (.-entry this) entry)
      (.insert (.-overlayState this) entry)
      (.updateDrag this (.-initialPosition this) (g/DragUpdateDetails .globalPosition (.-initialPosition this))))
    nil)

  (updateDrag [^DragAvatar this ^w/Offset global-position ^g/DragUpdateDetails details]
    (.-position! this global-position)
    (.-lastOffset! this (.- global-position (.-dragStartPoint this)))

    (when (.-mounted (.-overlayState this))
      (let [^r/RenderBox box (.findRenderObject (.-context (.-overlayState this)))
            ^w/Offset overlay-space-offset (.globalToLocal box global-position)
            ^w/Offset offset (.- overlay-space-offset (.-dragStartPoint this))
            delegate (w/DragBoundary.forRectOf (.-originalContext this))
            size (some-> this .-context .findRenderObject .-size)
            rect (.nearestPositionWithinBoundary delegate (.& offset (or size w/Size.zero)))
            offset (or ((.-onDragUpdate this) details (.-topLeft rect))
                       (.-topLeft rect))]
        (.-overlayOffset! this offset)
        (.-finalOffset! this offset)
        (.markNeedsBuild (.-entry this))))

    (let [^g/HitTestResult result (g/HitTestResult)
          _ (.hitTestInView (.-instance w/WidgetsBinding)
                            result
                            (.+ global-position (.-feedbackOffset this))
                            (.-viewId this))
          targets (.getDragTargets this (.-path result))
          lists-match? (and (>= (count targets)
                                (count (.-enteredTargets this)))
                            (seq (.-enteredTargets this))
                            (every? true? (map = targets (.-enteredTargets this))))]

      (if lists-match?
        (doseq [^DragTargetState target (.-enteredTargets this)]
          (.didMove target this))

        (do
          (.leaveAllEntered this)
          (let [new-target (->> targets
                                (filter some?)
                                (filter (fn [target]
                                          (.-enteredTargets! this (conj (.-enteredTargets this) target))
                                          (.didEnter target this)))
                                first)]

            (doseq [target (.-enteredTargets this)]
              (.didMove target this))

            (.-activeTarget! this new-target))))))

  (getDragTargets [^DragAvatar _ path]
    (for [entry path
          :let [target (.-target entry)]
          :when (instance? r/RenderMetaData target)
          :let [meta-data (.-metaData target)]
          :when (instance? DragTargetState meta-data)]
      meta-data))

  (leaveAllEntered [^DragAvatar this]
    (doseq [target (.-enteredTargets this)]
      (.didLeave target this))
    (.-enteredTargets! this #{}))

  (finishDrag [^DragAvatar this end-kind velocity]
    (let [^r/RenderBox box (.findRenderObject (.-context (.-overlayState this)))
          target (when (= end-kind :dropped) (.-activeTarget this))
          target-box (some-> target .-context .findRenderObject)
          target-size (some-> target-box .-size)
          child-box (some-> this .-originalContext .findRenderObject)
          expected-offset (if (and target-box child-box)
                            (.globalToLocal
                             child-box
                             (.- (.localToGlobal target-box (.center target-size w/Offset.zero))
                                 (.localToGlobal child-box (.center (.-size child-box) w/Offset.zero))))
                            w/Offset.zero)
          was-accepted (boolean
                        (when target
                          (.didDrop target this)
                          (.-enteredTargets! this (disj (.-enteredTargets this) target))
                          true))
          last-offset (.-lastOffset this)
          velocity (or velocity w/Velocity.zero)
          final-offset (or ((.-onDragWillEnd this) velocity last-offset expected-offset was-accepted)
                           expected-offset)
          duration (t/duration 200)]
      (if-not (= final-offset last-offset)
        (do
          (.-duration! (.-controller this) duration)
          (.-finalOffset! this (.localToGlobal child-box final-offset))
          (.addStatusListener (.-controller this)
                              (fn [status]
                                (when (= a/AnimationStatus.completed status)
                                  (.dragCompletion this velocity final-offset was-accepted))
                                nil))
          (.forward (.-controller this) .from 0.0))
        (.dragCompletion this velocity final-offset was-accepted))))

  (dragCompletion [^DragAvatar this
                   ^w/Velocity velocity
                   ^w/Offset offset
                   ^bool was-accepted]
    (.clearStatusListeners (.-controller this))
    (.leaveAllEntered this)
    (.-activeTarget! this nil)
    (.remove (.-entry this))
    (.dispose (.-entry this))
    (.-entry! this nil)

    ((.-onDragEnd this) velocity offset was-accepted))

  (buildWidget [^DragAvatar this ^w/BuildContext context]
    (.-context! this context)
    (w/AnimatedBuilder
     .animation (.-controller this)
     .child (w/ExcludeSemantics
             .excluding (.-ignoringFeedbackSemantics this)
             .child (w/IgnorePointer
                     .ignoring (.-ignoringFeedbackPointer this)
                     .child (.-feedback this)))
     .builder (fn [_ child]
                (let [offset (w/Offset.lerp (.-overlayOffset this)
                                            (.-finalOffset this)
                                            (a/Curves.easeInOut.transform (.-value (.-controller this))))]
                  (w/Positioned
                   .left (.-dx offset)
                   .top (.-dy offset)
                   .child child)))))

  (^w/Velocity restrictVelocityAxis [^DragAvatar this ^w/Velocity velocity]
    (if-not (.-axis this)
      velocity
      (w/Velocity .pixelsPerSecond
                  (.restrictAxis this (.-pixelsPerSecond velocity)))))

  (^w/Offset restrictAxis [^DragAvatar this ^w/Offset offset]
    (condp = (.-axis this)
      p/Axis.horizontal (w/Offset (.-dx offset) 0.0)
      p/Axis.vertical (w/Offset 0.0 (.-dy offset))
      offset)))

;; DragTarget widget
(deftype DragTarget [^w/Key? k
                     builder
                     onWillAccept
                     onAccept
                     onLeave
                     onMove
                     ^w/HitTestBehavior hitTestBehavior]
  :extends (w/StatefulWidget .key k)

  (createState [^DragTarget _] (DragTargetState #{} #{})))

;; DragTargetState class
(deftype DragTargetState [^:mutable candidateAvatars
                          ^:mutable rejectedAvatars]
  :extends (#/(w/State DragTarget))

  (^w/Widget build [^DragTargetState this ^w/BuildContext context]
    (w/MetaData
     .metaData this
     .behavior (-> this .-widget .-hitTestBehavior)
     .child ((-> this .-widget .-builder)
             context
             (map #(.-data %) (.-candidateAvatars this)))))

  (setState [^DraggableState this modify]
    (if (.-mounted this)
      (.setState ^super this (fn [] (modify) nil))
      (modify)))

  DragTargetState
  (^bool didEnter [^DragTargetState this ^DragAvatar avatar]
    (assert (not (-> this .-candidateAvatars (contains? avatar))))
    (assert (not (-> this .-rejectedAvatars (contains? avatar))))
    (let [^DragTarget widget (.-widget this)
          ^bool resolved-will-accept (or (nil? (.-onWillAccept widget))
                                         ((.-onWillAccept widget) (.-data avatar) (.-lastOffset avatar)))]
      (if resolved-will-accept
        (do
          (.setState this #(.-candidateAvatars! this (conj (.-candidateAvatars this) avatar)))
          true)
        (do
          (.setState this #(.-rejectedAvatars! this (conj (.-rejectedAvatars this) avatar)))
          false))))

  (didLeave [^DragTargetState this ^DragAvatar avatar]
    (assert (or (-> this .-candidateAvatars (contains? avatar))
                (-> this .-rejectedAvatars (contains? avatar))))
    (when (.-mounted this)
      (.setState this (fn []
                        (.-rejectedAvatars! this (disj (.-rejectedAvatars this) avatar))
                        (.-candidateAvatars! this (disj (.-candidateAvatars this) avatar))
                        nil))
      (when-let [on-leave (-> this .-widget .-onLeave)]
        (on-leave (.-data avatar))))
    nil)

  (didDrop [^DragTargetState this ^DragAvatar avatar]
    (assert (-> this .-candidateAvatars (contains? avatar)))
    (when (.-mounted this)
      (.setState this #(.-candidateAvatars! this (disj (.-candidateAvatars this) avatar)))
      (when-let [on-accept (-> this .-widget .-onAccept)]
        (when (some? (.-data avatar))
          (on-accept (.-data avatar) (.-lastOffset avatar)))))
    nil)

  (didMove [^DragTargetState this ^DragAvatar avatar]
    (when (and (.-mounted this) (some? (.-data avatar)))
      (when-let [on-move (-> this .-widget .-onMove)]
        (on-move (.-data avatar) (.-lastOffset avatar))))
    nil))

(defn ^w/Widget draggable* [{:keys [key
                          delay
                          feedback
                          data
                          axis
                          placeholder
                          feedback-offset
                          drag-anchor-strategy
                          affinity
                          max-simultaneous-drags
                          on-drag-start
                          on-drag-update
                          on-drag-will-end
                          on-drag-end
                          haptic-feedback-on-start
                          ignoring-feedback-semantics
                          ignoring-feedback-pointer
                          root-overlay
                          hit-test-behavior
                          allowed-buttons-filter]
                   :or {feedback-offset w/Offset.zero
                        drag-anchor-strategy child-drag-anchor-strategy
                        hit-test-behavior w/HitTestBehavior.deferToChild
                        ignoring-feedback-semantics true
                        ignoring-feedback-pointer true
                        root-overlay false}}
                  child]
  (let [delay (some-> (if (= :default delay) g/kLongPressTimeout delay) t/duration)]
    (Draggable
     (t/widget-key key)
     delay
     (or feedback child)
     data
     (some-> axis t/axis)
     placeholder
     (t/offset feedback-offset)
     drag-anchor-strategy
     (some-> (or affinity axis) t/axis)
     (some-> max-simultaneous-drags int)
     on-drag-start
     on-drag-update
     on-drag-will-end
     on-drag-end
     (boolean
      (if (nil? haptic-feedback-on-start)
        (some-> delay (.> core/Duration.zero))
        haptic-feedback-on-start))
     (boolean ignoring-feedback-semantics)
     (boolean ignoring-feedback-pointer)
     (boolean root-overlay)
     (t/hit-test-behavior hit-test-behavior)
     allowed-buttons-filter
     child)))

(defn ^w/Widget drag-target*
  [{:keys [key builder on-will-accept on-accept on-leave on-move hit-test-behavior]}]
  (DragTarget
   (t/widget-key key)
   (if (fn? builder)
     builder
     (constantly builder))
   on-will-accept
   on-accept
   on-leave
   on-move
   (t/hit-test-behavior (or hit-test-behavior r/HitTestBehavior.translucent))))
