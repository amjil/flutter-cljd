(ns flutter-cljd.internal.container
  (:require
   ["package:flutter/material.dart" :as m]
   [flutter-cljd.types :as t]
   [flutter-cljd.drawing :as dr]))

(defn container*
  "Internal implementation of container widget.
  See flutter-cljd.widgets/container for public API documentation."
  ([] (container* {} nil))
  ([child] (if (instance? m/Widget child) (container* {} child) (container* child nil)))
  ([args child]
   (let [key (t/widget-key (args :key))
         alignment (some-> args :alignment t/alignment-geometry)
         padding (some-> args :padding t/insets)
         color (some-> args :color t/color)
         decor (cond
                 (contains? args :decoration)
                 (let [decor (t/decoration (:decoration args))]
                   (if (nil? color)
                     decor
                     (.copyWith decor .color color)))
                 
                 (some? color)
                 (m/BoxDecoration .color color)
                 
                 :else nil)
         foreground-decoration (some-> args :foreground-decoration t/decoration)
         hug-height (= (some args [:height :h :size]) :hug) 
         hug-width (= (some args [:width :w :size]) :hug)
         constraints (some-> (:constraints args args)
                             t/some-box-constraints
                             .normalize)
         margin (some-> args :margin t/insets)
         transform (some-> args :transform dr/mat4)
         transform-alignment (some-> args :transform-alignment t/alignment-geometry)
         clip-behavior (t/clip (or (some args [:clip :clip-behavior]) m/Clip.none))
         container (if
                    (contains? args :animation)
                     (let [animation (t/animation-options (:animation args {}))]
                       (m/AnimatedContainer
                        .key key
                        .alignment alignment
                        .padding padding
                        .color nil
                        .decoration decor
                        .foregroundDecoration foreground-decoration
                        .width nil
                        .height nil
                        .constraints constraints
                        .margin margin
                        .transform transform
                        .transformAlignment transform-alignment
                        .clipBehavior clip-behavior
                        .child child
                        .duration (animation :duration)
                        .curve (animation :curve)
                        .onEnd (animation :on-end)))

                     (m/Container
                      .key key
                      .alignment alignment
                      .padding padding
                      .color nil
                      .decoration decor
                      .foregroundDecoration foreground-decoration
                      .width nil
                      .height nil
                      .constraints constraints
                      .margin margin
                      .transform transform
                      .transformAlignment transform-alignment
                      .clipBehavior clip-behavior
                      .child child))]
     (cond
       (and hug-height hug-width)
       (m/IntrinsicWidth .child (m/IntrinsicHeight .child container))

       hug-width
       (m/IntrinsicWidth .child container)

       hug-height
       (m/IntrinsicHeight .child container) 

       :else container))))
