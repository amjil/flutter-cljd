(ns flutter-cljd.internal.animated
  (:require
   [cljd.core :as c]
   ["dart:ui" :as ui]
   [cljd.flutter :as f]
   [flutter-cljd.types :as t]
   [flutter-cljd.ListenableAtom :as la]
   ["package:flutter/foundation.dart" :as fd]
   ["package:flutter/widgets.dart" :as w]
   ["package:flutter/animation.dart" :as a]
   [flutter-cljd.utils :as ut]))

;; MARK: Animated

(defn- ^f/CustomTween build-tween [lerp-fn value]
  (doto (f/CustomTween (or lerp-fn #(ut/lerp %1 %2)) nil)
    (.-begin! value)
    (.-end! value)))

(defn animated*
  [builder values]
   (let [has-child? (instance? w/Widget (last values))
         [animation builder args]
         (cond
           (fn? builder) [{} builder values]
           (fn? (first values)) [builder (first values) (drop 1 values)]
           (and (fn? (second values))
                (or (and has-child? (= (count values) 3))
                    (= (count values) 2)))
           [builder (second values) (cons (first values) (drop 2 values))]
           :else (throw (ex-info "Invalid arguments in animated" {:args (cons builder values)})))
         [values child] (if has-child?
                        [(vec (drop-last args)) (last args)]
                        [(vec args) nil])
         getter #(.-value %)
         builder (fn [value child]
                   (apply builder (if has-child? (conj value child) value)))]
     (cond
       (map? animation) 
       (let [options (t/animation-options animation)
             lerp (:lerp animation)
             condition (if (some? (animation :when)) (animation :when) true)]
         (w/TweenAnimationBuilder
          .key (t/widget-key (animation :key))
          .tween (build-tween lerp values)
          .duration (if condition (options :duration) (t/duration 0))
          .curve (options :curve)
          .builder (fn [_ value child] (builder value child))
          .onEnd (options :on-end)
          .child child))

       (or
        (instance? a/Animation animation)
        (instance? fd/ValueListenable animation))
       (w/AnimatedBuilder
        .animation animation
        .child child
        .builder (fn [_ child] (builder (getter animation) child))) 
       
       (instance? c/Atom animation) 
       (w/AnimatedBuilder
        .animation (la/AtomListenable animation)
        .child child
        .builder (fn [_ child]
                   (builder (getter animation) child)))

       :else
       (throw (ex-info "Invalid animation" {:animation animation})))))
  
 
(deftype TransformedAnimation
         [^a/Animation parent transform]
  :extends a/Animation
  (isAnimating [this] (-> this .-parent .-isAnimating))
  (isCompleted [this] (-> this .-parent .-isCompleted))
  (isDismissed [this] (-> this .-parent .-isDismissed))
  (isForwardOrCompleted [this] (-> this .-parent .-isForwardOrCompleted))
  (status [this] (-> this .-parent .-status))
  (value [this] ((.-transform this) (-> this .-parent .-value)))
  (addListener [this listener] (.addListener (.-parent this) listener))
  (removeListener [this listener] (.removeListener (.-parent this) listener))
  (addStatusListener [this listener] (.addStatusListener (.-parent this) listener))
  (removeStatusListener [this listener] (.removeStatusListener (.-parent this) listener)))

(defn animation-of
  ([^a/Animation value transform]
   (TransformedAnimation value transform)))

 (defn- set-value [this new-value]
    (let [old-value (-> this .-tween .-end)
          tween (.-tween this)]
      (when-not (= new-value old-value)
        (.-begin! tween (.evaluate tween this))
        (.-end! tween new-value)
        (if-not (.-isAnimating this)
          (.forward this .from 0.0)
          (let [progress (.-value this)]
            (.forward this .from 0.0)
            (.-value! this progress)))
        nil)))
 
 (defn- get-state [this]
    (-> this .-tween .-end))
  
(deftype AnimatedValue 
         [tween
          ^a/TickerProvider vsync
          duration
          curve]
  :extends (a/AnimationController
             .vsync vsync
             .duration duration) 
  c/IEquiv
  (-equiv [o other] (identical? o other))
  c/IDeref
  (-deref [this] (get-state this))
  c/ISwap
  (-swap! [this f] (set-value this (f (get-state this))))
  (-swap! [this f a] (set-value this (f (get-state this) a)))
  (-swap! [this f a b] (set-value this (f (get-state this) a b)))
  (-swap! [this f a b xs] (set-value this (apply f (get-state this) a b xs)))
  c/IReset
  (-reset! [this new-value] (set-value this new-value)) 
  c/IFn
  (-invoke [this transform]
           (animation-of this transform)))

 (defn animated-value
   ([initial-value vsync] (animated-value initial-value vsync {}))
   ([initial-value vsync options]
    (let [options (t/animation-options options)]
      (AnimatedValue 
       (build-tween (:lerp options) initial-value) 
       vsync
       (:duration options)
       (:curve options)))))
 

;; (defn ttt []
;;   (cntr {:duration 2.0 :curve :ease-in-out}
;;         {:color {:tween [w/Colors.red w/Colors.blue]
;;                  :curve (t/interval 0.4 1 :ease-in-out)}
;;          :offset {:tween [{:dx 0.0 :dy 0.0} {:dx 100.0 :dy 100.0}]
;;                   :value {:dx 0.0 :dy 0.0}}})

;;   (cntr {:color w/Colors.red
;;          :offset {:dx 0.0 :dy 0.0}})

;;   (animation-of cntr :color
;;                 {:tween [w/Colors.red w/Colors.blue] 
;;                  :curve (t/interval 0.4 1 :ease-in-out)})

;;   (animate-intervals cntr {[0 1] #(assoc % :color w/Colors.blue) 
;;                            [0.5 1] #(assoc-in % [:color :alpha] 0.5)})
  
;;   (animate cntr #(assoc % :color w/Colors.blue))
  
;;   (animate cntr {:color [0.3 :linear]})

  

;;   )