(ns flutter-cljd.internal.animated
  (:require
   [cljd.core :as c]
   [flutter-cljd.types :as t]
   [flutter-cljd.ListenableAtom :as la]
   ["package:flutter/foundation.dart" :as fd]
   ["package:flutter/widgets.dart" :as w]
   ["package:flutter/animation.dart" :as a]))

;; MARK: Animated

(defn animated*
  [builder values]
  (let [has-child? (instance? w/Widget (last values))
        [animation builder args]
        (cond
          (fn? builder) 
          (if (and (= 1 (count values)) (instance? fd/Listenable (last values)))
            [(first values) builder (drop-last values)]
            [{} builder values])
          (fn? (first values)) [builder (first values) (drop 1 values)]
          (and (fn? (second values))
               (or (and has-child? (= (count values) 3))
                   (= (count values) 2)))
          [builder (second values) (cons (first values) (drop 2 values))]
          :else (throw (ex-info "Invalid arguments in animated" {:args (cons builder values)})))
        [values child] (if has-child?
                         [(vec (drop-last args)) (last args)]
                         [(vec args) nil])
        getter #(.-value %)
        animation (if (instance? c/Atom animation) (la/AtomListenable animation) animation)]
    (cond
      (map? animation)
      (let [options (t/animation-options animation)
            lerp (:lerp animation)
            condition (if (some? (animation :when)) (animation :when) true)]
        (w/TweenAnimationBuilder
         .key (t/widget-key (animation :key))
         .tween (t/tween lerp values values)
         .duration (if condition (options :duration) (t/duration 0))
         .curve (options :curve)
         .builder (fn [_ value child] (apply builder (if has-child? (conj value child) value)))
         .onEnd (options :on-end)
         .child child))
      
      (instance? fd/Listenable animation)
      (w/AnimatedBuilder
       .animation animation
       .child child
       .builder (fn [_ child]
                  (let [value (getter animation)]
                    (apply builder (if has-child? (conj values value child) (conj values value))))))

      :else
      (throw (ex-info "Invalid animation" {:animation animation})))))
