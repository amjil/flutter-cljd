(ns flutter-cljd.internal.animated
  (:require
   [cljd.core :as c]
   [flutter-cljd.types :as t]
   [flutter-cljd.ListenableAtom :as la]
   ["dart:core" :as dc]
   ["package:flutter/animation.dart" :as a]
   ["package:flutter/foundation.dart" :as fd]
   ["package:flutter/widgets.dart" :as w]))

(declare ValueAnimationBuilderState)

(deftype ValueAnimationBuilder [^w/Key? k
                                value
                                ^dc/Duration duration
                                ^a/Curve curve
                                lerp
                                onEnd
                                updateStrategy
                                builder
                                ^w/Widget? child]
  :extends (w/StatefulWidget .key k)

  (createState [^ValueAnimationBuilder this]
    (ValueAnimationBuilderState (t/tween (.-lerp this) (.-value this) (.-value this)) nil (a/AlwaysStoppedAnimation 0.0) [])))

(deftype ValueAnimationBuilderState [^#/(a/Tween dynamic) ^:mutable currentTween
                                     ^a/AnimationController? ^:mutable controller
                                     ^#/(a/Animation double) ^:mutable animation
                                     ^:mutable queue]
  :extends (#/(w/State ValueAnimationBuilder))

  (initState [^ValueAnimationBuilderState this]
    (.-currentTween! this (t/tween (-> this .-widget .-lerp) (-> this .-currentTween .-end) (-> this .-widget .-value)))
    (.initState ^super this)
    (.-controller! this (a/AnimationController
                         .duration (-> this .-widget .-duration)
                         .debugLabel (when fd/kDebugMode (-> this .-widget .toStringShort))
                         .vsync this))
    (.updateAnimation this (.-widget this))
    (-> this .-controller (.addStatusListener (fn [^a/AnimationStatus status]
                                                (when (.-isCompleted status)
                                                  (when-let [onEnd (-> this .-widget .-onEnd)]
                                                    (onEnd))
                                                  (when-let [queue (seq (.-queue this))]
                                                    (.-queue! this (rest queue))
                                                    (.updateState this (first queue) (or (second queue) (.-widget this))))))))
    (-> this .-controller (.addListener (fn [] (.setState this (fn [])))))
    (when (not= (-> this .-currentTween .-begin) (-> this .-currentTween .-end))
      (-> this .-controller .forward))
    nil)

  (didUpdateWidget [^ValueAnimationBuilderState this ^ValueAnimationBuilder oldWidget]
    (.didUpdateWidget ^super this oldWidget)
    (let [^ValueAnimationBuilder widget (.-widget this)]
      (if (-> this .-controller .-isAnimating)
        (case (.-updateStrategy widget)
          :immediate (do
                       (.-queue! this [])
                       (.updateState this oldWidget widget))
          :on-complete (.-queue! this [oldWidget])
          :sequential (.-queue! this (conj (.-queue this) oldWidget))
          (throw (Exception (str "Invalid :update-strategy value: '" (.-updateStrategy widget) "', expected :immediate, :on-complete or :sequential"))))
        (do
          (.-queue! this [])
          (.updateState this oldWidget widget))))
    nil)

  (^w/Widget build [^ValueAnimationBuilderState this ^w/BuildContext context]
    ((-> this .-widget .-builder)
     context
     (-> this .-currentTween (.evaluate (-> this .-animation)))
     (-> this .-widget .-child)))

  (dispose [^ValueAnimationBuilderState this]
    (.dispose (.-animation this))
    (some-> this .-controller .dispose)
    (.dispose ^super this))

  ValueAnimationBuilderState
  (updateState [^ValueAnimationBuilderState this ^ValueAnimationBuilder oldWidget ^ValueAnimationBuilder newWidget]
    (when (not= (.-curve oldWidget) (.-curve newWidget)) 
      (.dispose (.-animation this))
      (.updateAnimation this newWidget))
    (.-duration! (.-controller this) (.-duration newWidget))
    (when (not= (.-value oldWidget) (.-value newWidget))
      (.-currentTween! this (t/tween
                             (-> newWidget .-lerp)
                             (-> this .-currentTween (.evaluate (.-animation this)))
                             (-> newWidget .-value)))
      (.forward (.-controller this) .from 0.0))
    nil)

  (updateAnimation [^ValueAnimationBuilderState this ^ValueAnimationBuilder widget]
    (.-animation! this
                  (a/CurvedAnimation .parent (.-controller this) .curve (.-curve widget)))
    nil)
  ^:mixin #/(w/SingleTickerProviderStateMixin ValueAnimationBuilder))

(defn ^w/Widget animated*
  [builder values]
  (let [has-child? (instance? w/Widget (last values))
        [animation builder args]
        (cond
          (fn? builder)
          [{} builder values]
          (fn? (first values)) [builder (first values) (drop 1 values)]
          (and (fn? (second values))
               (or (and has-child? (= (count values) 3))
                   (= (count values) 2)))
          [builder (second values) (cons (first values) (drop 2 values))]
          :else (throw (ex-info "Invalid arguments in animated" {:args (cons builder values)})))
        [values child] (if has-child?
                         [(vec (drop-last args)) (last args)]
                         [(vec args) nil])
        animation (if (instance? c/Atom animation) (la/atom-listenable animation) animation)]
    (cond
      (map? animation)
      (let [options (t/animation-options animation)
            lerp (:lerp animation)
            condition (if-some [when (animation :when)] when true)]
        (ValueAnimationBuilder
         (t/widget-key (animation :key))
         values
         (if condition (options :duration) (t/duration 0))
         (options :curve)
         lerp
         (options :on-end)
         (or (animation :update-strategy) :immediate)
         (fn [_ value child] (apply builder (if has-child? (conj value child) value)))
         child))

      (instance? fd/Listenable animation)
      (w/AnimatedBuilder
       .animation animation
       .child child
       .builder (fn [_ child]
                  (let [value (.-value animation)]
                    (apply builder (if has-child? (conj values value child) (conj values value))))))

      :else
      (throw (ex-info "Invalid animation" {:animation animation})))))
