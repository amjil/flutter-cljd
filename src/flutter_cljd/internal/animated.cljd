(ns flutter-cljd.internal.animated
  (:require
   [cljd.core :as c]
   [cljd.flutter :as f]
   [flutter-cljd.types :as t]
   [flutter-cljd.ListenableAtom :as la]
   ["package:flutter/foundation.dart" :as fd]
   ["package:flutter/widgets.dart" :as w]
   ["package:flutter/animation.dart" :as a]
   [flutter-cljd.utils :as ut]))

;; MARK: Animated

(defn- ^f/CustomTween build-tween [lerp-fn value]
  (doto (f/CustomTween lerp-fn nil)
    (.-begin! value)
    (.-end! value)))

(defn animated*
  [builder values]
   (let [has-child? (instance? w/Widget (last values))
         [animation builder args]
         (cond
           (fn? builder) [{} builder values]
           (fn? (first values)) [builder (first values) (drop 1 values)]
           (and (fn? (second values))
                (or (and has-child? (= (count values) 3))
                    (= (count values) 2)))
           [builder (second values) (cons (first values) (drop 2 values))]
           :else (throw (ex-info "Invalid arguments in animated" {:args (cons builder values)})))
         [value child] (if has-child?
                        [(vec (drop-last args)) (last args)]
                        [(vec args) nil])
         getter #(.-value %)
         builder (fn [value child]
                   (apply builder (conj value child)))]
     (cond
       (map? animation) 
       (let [options (t/animation-options animation)
             lerp (or (:lerp animation) #(ut/lerp %1 %2))
             trigger (:trigger animation)]
         (w/TweenAnimationBuilder
          .key (t/widget-key (animation :key))
          .tween (build-tween lerp value)
          .duration (options :duration)
          .curve (options :curve)
          .builder (fn [_ value child]
                     (builder value child))
          .onEnd (options :on-end)
          .child child))

       (or
        (instance? a/Animation animation)
        (instance? fd/ValueListenable animation))
       (w/AnimatedBuilder
        .animation animation
        .child child
        .builder (fn [_ child]
                   (builder (getter animation) child))) 
       
       (instance? c/Atom animation) 
       (w/AnimatedBuilder
        .animation (la/AtomListenable animation)
        .child child
        .builder (fn [_ child]
                   (builder (getter animation) child)))

       :else
       (throw (ex-info "Invalid animation" {:animation animation})))))
