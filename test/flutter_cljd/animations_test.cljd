(ns flutter-cljd.animations-test
  (:require [clojure.test :refer [deftest is testing]]
            [flutter-cljd.curves :as c]
            [flutter-cljd.animations :as a]
            ["package:flutter/animation.dart" :as fa]
            ["package:flutter_test/flutter_test.dart" :as ft]
            [cljd.string :as str]))

(deftest test-map-anim
  (testing "Numeric transformation"
    (let [parent (fa/AlwaysStoppedAnimation 5)
          transform #(* % 3)
          anim (a/map-anim transform parent)]
      (is (= (.-value anim) 15))))

  (testing "Map transformation"
    (let [parent (fa/AlwaysStoppedAnimation {:x 10 :y 20})
          transform #(update % :x inc)
          anim (a/map-anim transform parent)]
      (is (= (.-value anim) {:x 11 :y 20}))))

  (testing "String transformation"
    (let [parent (fa/AlwaysStoppedAnimation "hello")
          transform str/upper-case
          anim (a/map-anim transform parent)]
      (is (= (.-value anim) "HELLO"))))

  (testing "Lookup transformation"
    (let [parent (fa/AlwaysStoppedAnimation {:x 10 :y 20})
          anim (:x parent)]
      (is (= (.-value anim) 10))))

  (testing "Listening to parent"
    (let [parent (fa/AlwaysStoppedAnimation 5)
          anim (a/map-anim identity parent)]
      (.addListener anim #(println "added")))))

(defn- unwrap
  ([animation] (unwrap nil animation nil))
  ([animation duration] (if (fn? animation) (unwrap nil animation duration) (unwrap animation duration nil)))
  ([value animation duration]
   (let [animation (.-prepare animation)
         interpolate (:interpolate (animation
                                    value
                                    (or duration (:duration (animation value nil)) 250)))]
     #(let [result (interpolate value (double %))]
        (if (double? result) (.round result) result)))))

(def ^:private percents
  (a/motion
   (fn [_ duration]
     {:duration duration
      :interpolate (fn [_ t] (int (* 100 t)))})
   (constantly "percents")))

(deftest test-const
  (testing "Single value"
    (let [anim (unwrap (a/const 100))]
      (is (= (anim 0) 100))
      (is (= (anim 0.5) 100))
      (is (= (anim 1) 100))
      (is (= (.toString (a/const 100)) "(const 100)"))
      (is (= (a/const 100) (a/const 100))
          "Same motion should be equal")
      (is (not= (a/const 100) (a/const 200))
          "Different values should be not equal")))

  (testing "Multiple values"
    (let [anim (unwrap (a/const 0 50 100))]
      (is (= (anim 0) 0))
      (is (= (anim 0.33) 0))
      (is (= (anim 0.34) 50))
      (is (= (anim 0.66) 50))
      (is (= (anim 0.67) 100))
      (is (= (anim 1) 100))))

  (testing "With duration option"
    (let [anim (unwrap (a/const 0 50 100 :dur 1000))]
      (is (= (anim 0) 0))
      (is (= (anim 0.33) 0))
      (is (= (anim 0.34) 50))
      (is (= (anim 0.66) 50))
      (is (= (anim 0.67) 100))
      (is (= (anim 1) 100))))

  (testing "With initial value"
    (let [anim (unwrap 75 (a/const 100))]
      (is (= (anim 0) 100))
      (is (= (anim 0.5) 100))
      (is (= (anim 1) 100))))

  (testing "With combined options"
    (let [anim (unwrap (a/const 0 100 {:duration 1000 :delay 500}))]
      (is (= (anim 0) 0))
      (is (= (anim 0.65) 0))
      (is (= (anim 0.67) 100))
      (is (= (anim 1) 100)))))

(deftest test-to
  (testing "Single value"
    (let [anim (unwrap (a/to 100))]
      (is (= (anim 0) 100))
      (is (= (anim 0.5) 100))
      (is (= (anim 1) 100))))

  (testing "Valid between two values"
    (let [anim (unwrap (a/to 0 100))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 25))
      (is (= (anim 0.5) 50))
      (is (= (anim 0.75) 75))
      (is (= (anim 1) 100))
      (is (= (.toString (a/to 0 100)) "(to 0 100)"))
      (is (= (a/to 0 100) (a/to 0 100))
          "Same motion should be equal")
      (is (not= (a/to 0 100) (a/to 0 200))
          "Different values should be not equal")))

  (testing "Valid between two non zero values"
    (let [anim (unwrap (a/to 50 100))]
      (is (= (anim 0) 50))
      (is (= (anim 0.25) 63))
      (is (= (anim 0.5) 75))
      (is (= (anim 0.75) 88))
      (is (= (anim 1) 100))))

  (testing "Valid between many values"
    (let [anim (unwrap (a/to 0 100 200 300 400 500))]
      (is (= (anim 0) 0))
      (is (= (anim 0.2) 100))
      (is (= (anim 0.4) 200))
      (is (= (anim 0.6) 300))
      (is (= (anim 0.8) 400))
      (is (= (anim 1) 500))))

  (testing "With initial value"
    (let [anim (unwrap 100 (a/to 200))]
      (is (= (anim 0) 100))
      (is (= (anim 0.5) 150))
      (is (= (anim 1) 200))))

  (testing "With duration option"
    (let [anim (unwrap (a/to 0 100 :dur 100))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 50))
      (is (= (anim 1) 100))))

  (testing "With curve option"
    (let [anim (unwrap (a/to 0 100 :curve :ease-in))]
      (is (= (anim 0) 0))
      (is (< (anim 0.5) 50) "Should be affected by ease-in curve")
      (is (= (anim 1) 100))))

  (testing "With relative delay option"
    (let [anim (unwrap (a/to 0 100 {:rel-delay 0.5}))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 0))
      (is (= (anim 0.75) 50))
      (is (= (anim 1) 100))))

  (testing "With combined options"
    (let [anim (unwrap (a/to 0 100 :dur 1000 :curve :ease-in))]
      (is (= (anim 0) 0))
      (is (not= (anim 0.5) 50) "Should be affected by ease-in curve")
      (is (= (anim 1) 100)))))

(deftest test-with
  (testing "Duration option"
    (let [anim ((.-prepare (a/with :duration 100 percents)) nil nil)]
      (is (= (.-inMilliseconds (:duration anim)) 100))
      (is (= (.toString (a/with {:duration 100} (a/to 0 100)))
             "(duration 100 (to 0 100))"))
      (is (= (.toString (a/with :duration 100 :curve :ease-in (a/to 0 100)))
             "(duration 100 (curve :ease-in (to 0 100)))"))
      (is (= (.toString (a/with :relative-delay 0.5 :relative-duration 0.5 (a/to 0 100)))
             "(relative-delay 0.5 (relative-duration 0.5 (to 0 100)))"))))

  (testing "Start time option"
    (let [anim (unwrap (a/with {:delay 500 :duration 1000} percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 0))  ; Before start
      (is (= (anim 0.5) 25))  ; After start
      (is (= (anim 0.75) 62)) ; Mid-animation
      (is (= (anim 1) 100)))) ; End

  (testing "Duration ratio option"
    (let [anim (unwrap (a/with {:relative-duration 0.5} percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 25))
      (is (= (anim 0.5) 50))
      (is (= (anim 0.75) 75))
      (is (= (anim 1) 100))))

  (testing "Start time ratio option"
    (let [anim (unwrap (a/with :rel-delay 0.5 :rel-dur 0.5 percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 0))
      (is (= (anim 0.75) 50))
      (is (= (anim 1) 100))))

  (testing "Curve option"
    (let [anim (unwrap (a/with {:curve (constantly 0)} percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 0))
      (is (= (anim 1) 0))))

  (testing "Curve :ease-in option"
    (let [anim (unwrap (a/with {:curve :ease-in} percents))]
      (is (= (anim 0) 0))
      (is (< (anim 0.5) 50))
      (is (= (anim 1) 100))))

  (testing "Combined options"
    (let [anim (unwrap (a/with {:duration 1000
                                :delay 500
                                :curve :ease-in-out}
                               percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 0))
      (is (not= (anim 0.75) 50)) ; Should not be linear due to ease-in-out
      (is (= (anim 1) 100))))

  (testing "Nested with"
    (let [anim (unwrap (a/with :dur 1000 (a/with :rel-dur 0.5 (a/with :curve :ease-in percents))))]
      (is (= (anim 0) 0))
      (is (< (anim 0.5) 50) "Should be affected by ease-in")
      (is (= (anim 1) 100)))

    (let [anim (unwrap (a/with {:duration 1000}
                               (a/with {:relative-delay 0.5}
                                       (a/with {:relative-duration 0.5}
                                               percents))))]
      (is (= (anim 0) 0))
      (is (= (anim 0.4) 0) "Should not start before relative-delay")
      (is (= (anim 0.5) 0) "Should start at relative-delay")
      (is (= (anim 0.75) 50))
      (is (= (anim 1) 100)))))

(deftest test-repeat
  (testing "Basic repeat functionality"
    (let [base-dur 1000
          repeated (.-prepare (a/repeat 2 (a/duration base-dur percents)))
          {:keys [duration]} (repeated nil nil)]
      (is (= (.-inMilliseconds duration) (* base-dur 2))
          "Duration should be doubled")
      (is (= (.toString (a/repeat 2 (a/to 0 100)))
             "(repeat 2 (to 0 100))"))
      (is (= (a/repeat 2 (a/to 0 100))
             (a/repeat 2 (a/to 0 100)))
          "Same repeat motion should be equal")
      (is (not= (a/repeat 2 (a/to 0 100))
                (a/repeat 3 (a/to 0 100)))
          "Different repeat counts should be not equal")
      (is (not= (a/repeat 2 (a/to 0 100))
                (a/repeat 2 (a/to 0 200)))
          "Different values should be not equal")

      (let [repeated (a/repeat 2 (a/with {:duration base-dur} percents))
            anim (unwrap repeated)]
        (is (= (anim 0) 0))
        (is (= (anim 0.25) 50))  ; First iteration at 50%
        (is (= (anim 0.5) 0))    ; Start of second iteration
        (is (= (anim 0.75) 50))  ; Second iteration at 50%
        (is (= (anim 1) 100)))))  ; End

  (testing "Zero or negative count"
    (let [anim (unwrap 0 (a/repeat 0 percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 0))
      (is (= (anim 1) 0)))

    (let [anim (unwrap 0 (a/repeat 1 percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 50))
      (is (= (anim 1) 100)))))

(deftest test-autoreverse
  (testing "Basic autoreverse functionality"
    (let [base-dur 1000
          reversed (.-prepare (a/autoreverse (a/with :duration base-dur percents)))
          {:keys [duration]} (reversed nil nil)]
      (is (= (.-inMilliseconds duration) (* base-dur 2))
          "Duration should be doubled")
      (is (= (.toString (a/autoreverse (a/to 0 100)))
             "(autoreverse (to 0 100))"))
      (is (= (a/autoreverse (a/to 0 100)) (a/autoreverse (a/to 0 100)))
          "Same autoreverse motion should be equal")
      (is (not= (a/autoreverse (a/to 0 100)) (a/autoreverse (a/to 0 200)))
          "Different values should be not equal")

      (let [reversed (a/autoreverse (a/with {:duration base-dur} percents))
            anim (unwrap reversed)]
        (is (= (anim 0) 0))      ; Start
        (is (= (anim 0.25) 50))  ; Forward halfway
        (is (= (anim 0.5) 100))  ; Forward complete
        (is (= (anim 0.75) 50))  ; Reverse halfway
        (is (= (anim 1) 0))))))    ; Back to start

(deftest test-par
  (testing "Basic parallel animation"
    (let [anim (unwrap (a/par
                        :color (a/to 0 100)
                        :offset (a/to 200 300)))]
      (is (= (anim 0) {:color 0 :offset 200}))
      (is (= (anim 0.5) {:color 50 :offset 250}))
      (is (= (anim 1) {:color 100 :offset 300}))
      (is (= (.toString (a/par :color (a/to 0 100) :offset (a/to 200 300)))
             "(par :color (to 0 100) :offset (to 200 300))"))
      (is (= (a/par :color (a/to 0 100) :offset (a/to 200 300))
             (a/par :color (a/to 0 100) :offset (a/to 200 300)))
          "Same parallel motion should be equal")
      (is (not= (a/par :color (a/to 0 100) :offset (a/to 200 300))
                (a/par :color (a/to 0 200) :offset (a/to 200 300)))
          "Different values should be not equal")))

  (testing "With different durations"
    (let [anim (unwrap (a/par
                        :fast (a/with {:relative-duration 0.5} (a/to 0 100))
                        :slow (a/to 0 100)))]
      (is (= (anim 0) {:fast 0 :slow 0}))
      (is (= (anim 0.5) {:fast 100 :slow 50}))
      (is (= (anim 1) {:fast 100 :slow 100}))))

  (testing "Nested parallel animations"
    (let [anim (unwrap (a/par
                        :outer (a/to 0 100)
                        :inner (a/par
                                :x (a/to 0 10)
                                :y (a/to 0 20))))]
      (is (= (anim 0) {:outer 0 :inner {:x 0 :y 0}}))
      (is (= (anim 0.5) {:outer 50 :inner {:x 5 :y 10}}))
      (is (= (anim 1) {:outer 100 :inner {:x 10 :y 20}}))))

  (testing "With options"
    (let [anim (unwrap (a/par
                        {:duration 1000}
                        :a (a/to 0 100)
                        :b (a/with {:relative-duration 0.5} (a/to 0 50))))]
      (is (= (anim 0) {:a 0 :b 0}))
      (is (= (anim 0.5) {:a 50 :b 50}))
      (is (= (anim 1) {:a 100 :b 50}))))

  (testing "Duration computation"
    (let [anim1 (.-prepare
                 (a/par
                  :a (a/with {:duration 1000} (a/to 0 100))
                  :b (a/with {:duration 2000} (a/to 0 100))))
          {:keys [duration]} (anim1 nil nil)]
      (is (= (.-inMilliseconds duration) 2000) "Should use longest child duration"))

    (let [anim2 (.-prepare
                 (a/par
                  :a (a/with {:relative-duration 0.5} (a/to 0 100))
                  :b (a/with {:relative-duration 0.7} (a/to 0 100))))
          {:keys [duration]} (anim2 nil nil)]
      (is (nil? duration) "Should not compute duration from ratios alone"))

    (let [anim3 (.-prepare
                 (a/par {:duration 1000}
                        :a (a/with {:duration 500} (a/to 0 100))
                        :b (a/with {:duration 2000} (a/to 0 100))))
          {:keys [duration]} (anim3 nil nil)]
      (is (= (.-inMilliseconds duration) 2000) "Should use max of parent and children durations"))))

(deftest test-seq
  (testing "Basic sequential animation"
    (let [anim (unwrap (a/seq (a/to 0 50) (a/to 100)))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 25))
      (is (= (anim 0.5) 50))
      (is (= (anim 0.75) 75))
      (is (= (anim 1) 100))
      (is (= (.toString (a/seq (a/to 0 50) (a/to 100)))
             "(seq (to 0 50) (to 100))"))
      (is (= (a/seq (a/to 0 50) (a/to 100)) (a/seq (a/to 0 50) (a/to 100)))
          "Same sequential motion should be equal")
      (is (not= (a/seq (a/to 0 50) (a/to 100)) (a/seq (a/to 0 75) (a/to 100)))
          "Different values should be not equal")))

  (testing "With different durations"
    (let [anim (unwrap (a/seq
                        (->> (a/to 0 50) (a/duration 25))
                        (->> (a/to 100) (a/duration 75))))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 50))
      (is (= (anim 0.5) 67))
      (is (= (anim 0.75) 83))
      (is (= (anim 1) 100))))

  (testing "With different relative durations"
    (let [anim (unwrap (a/seq
                        (a/to 0)
                        (->> (a/to 50) (a/relative-duration 0.25))
                        (a/to 100)))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 50))
      (is (= (anim 0.5) 67))
      (is (= (anim 0.75) 83))
      (is (= (anim 1) 100))))

  (testing "With mixed durations"
    (let [anim (unwrap
                (a/seq
                 (a/to 0)
                 (->> 50 a/to (a/duration 25))
                 (->> 100 a/to (a/relative-duration 0.75))))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 50))
      (is (= (anim 0.5) 67))
      (is (= (anim 0.75) 83))
      (is (= (anim 1) 100))))

  (testing "With initial value map"
    (let [anim (unwrap (a/seq
                        (a/to {:x 0 :y 0})
                        (a/par
                         :x (a/to 100)
                         :y (a/to 200))))]
      (is (= (anim 0) {:x 0 :y 0}))
      (is (= (anim 0.5) {:x 50 :y 100}))
      (is (= (anim 1) {:x 100 :y 200}))))

  (testing "Nested sequences"
    (let [anim (unwrap (a/seq (a/to 0) (a/to 33) (a/seq (a/to 50) (a/to 67)) (a/to 100)))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 25))
      (is (= (anim 0.5) 50))
      (is (= (anim 0.67) 67))
      (is (= (anim 0.75) 75))
      (is (= (anim 1) 100))))

  (testing "With options"
    (let [anim (unwrap (a/seq
                        :duration 1000 :curve :ease-in
                        (a/to 0 50)
                        (a/to 50 100)))]
      (is (= (anim 0) 0))
      (is (< (anim 0.25) 25) "Should be affected by ease-in")
      (is (< (anim 0.75) 75) "Should be affected by ease-in")
      (is (= (anim 1) 100))))

  (testing "Duration computation"
    (let [anim1 (.-prepare
                 (a/seq
                  (a/duration 1000 (a/to 0 50))
                  (a/duration 2000 (a/to 50 100))))
          {:keys [duration]} (anim1 nil nil)]
      (is (= (.-inMilliseconds duration) 3000) "Should sum child durations"))

    (let [anim2 (.-prepare
                 (a/seq {:duration 5000}
                        (a/with {:relative-duration 0.2} (a/to 0 50))
                        (a/with {:relative-duration 0.8} (a/to 50 100))))
          {:keys [duration]} (anim2 nil nil)]
      (is (= (.-inMilliseconds duration) 5000) "Should use parent duration"))))

(deftest test-from
  (testing "Basic from functionality"
    (let [anim (unwrap (a/from 50 (a/to 100)))]
      (is (= (anim 0) 50))
      (is (= (anim 0.5) 75))
      (is (= (anim 1) 100))
      (is (= (.toString (a/from 50 (a/to 100)))
             "(from 50 (to 100))"))
      (is (= (a/from 50 (a/to 100)) (a/from 50 (a/to 100)))
          "Same from motion should be equal")
      (is (not= (a/from 50 (a/to 100)) (a/from 75 (a/to 100)))
          "Different initial values should be not equal")))

  (testing "With constant motion"
    (let [anim (unwrap (a/from 50 (a/const 100)))]
      (is (= (anim 0) 100))
      (is (= (anim 0.5) 100))
      (is (= (anim 1) 100))))

  (testing "With parallel motion"
    (let [anim (unwrap (a/from {:x 0 :y 0}
                               (a/par
                                :x (a/to 100)
                                :y (a/to 200))))]
      (is (= (anim 0) {:x 0 :y 0}))
      (is (= (anim 0.5) {:x 50 :y 100}))
      (is (= (anim 1) {:x 100 :y 200}))))

  (testing "With sequential motion"
    (let [anim (unwrap (a/from 0
                               (a/seq
                                (a/to 50)
                                (a/to 100))))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 50))
      (is (= (anim 1) 100))))

  (testing "With options"
    (let [anim (unwrap (a/from 0
                               (a/with {:duration 1000 :curve :ease-in}
                                       (a/to 100))))]
      (is (= (anim 0) 0))
      (is (< (anim 0.5) 50) "Should be affected by ease-in")
      (is (= (anim 1) 100)))))

(deftest test-from-to
  (testing "Basic from-to functionality"
    (let [anim (unwrap (a/from-to 0 100))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 50))
      (is (= (anim 1) 100))
      (is (= (.toString (a/from-to 0 100))
             "(from 0 (to 100))"))
      (is (= (a/from-to 0 100) (a/from-to 0 100))
          "Same from-to motion should be equal")
      (is (not= (a/from-to 0 100) (a/from-to 0 200))
          "Different values should be not equal")))

  (testing "With transform function"
    (let [double-fn #(* 2 %)
          anim (unwrap (a/from-to double-fn 5 10))]
      (is (= (anim 0) 10))  ; 5 * 2
      (is (= (anim 0.5) 15)) ; interpolated between 10 and 20
      (is (= (anim 1) 20)))) ; 10 * 2

  (testing "With options"
    (let [anim (unwrap (a/from-to 0 100 :duration 1000 :curve :ease-in))]
      (is (= (anim 0) 0))
      (is (< (anim 0.5) 50) "Should be affected by ease-in")
      (is (= (anim 1) 100)))))

(deftest test-map-motion
  (testing "Basic map-motion functionality"
    (let [anim (unwrap (a/map-motion inc (a/to 0 10)))]
      (is (= (anim 0) 1))
      (is (= (anim 0.5) 6))
      (is (= (anim 1) 11))
      (is (= (.toString (a/map-motion inc (a/to 0 10)))
             "(map-motion (to 0 10))"))
      (is (= (a/map-motion inc (a/to 0 10))
             (a/map-motion inc (a/to 0 10)))
          "Same map-motion should be equal")
      (is (not= (a/map-motion inc (a/to 0 10))
                (a/map-motion dec (a/to 0 10)))
          "Different functions should be not equal")))

  (testing "With type conversion"
    (let [anim (unwrap (a/map-motion int (a/to 0.0 10.0)))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 5))
      (is (= (anim 1) 10))))

  (testing "With complex transformation"
    (let [anim (unwrap (a/map-motion #(* % %) (a/to 0 10)))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 25))  ; (5 * 5)
      (is (= (anim 1) 100)))) ; (10 * 10)

  (testing "With options in inner motion"
    (let [anim (unwrap (a/map-motion inc 
                                    (a/to 0 10 :duration 1000 :curve :ease-in)))]
      (is (= (anim 0) 1))
      (is (< (anim 0.5) 6) "Should be affected by ease-in")
      (is (= (anim 1) 11)))))

(deftest test-side-effects
  (testing "Basic action execution"
    (let [executed (atom false)
          {:keys [side-effects]} ((.-prepare (a/action! :a #(reset! executed true))) nil nil)]
      (is (empty? (side-effects [0.0 0.5])))
      (is (= (count (side-effects [0.5 1.0])) 1))
      (is (false? @executed))
      ((first (side-effects [0.5 1.0])))
      (is (true? @executed))
      (is (= (.toString (a/action! :test #(println "test")))
             "(action! :test)"))
      (is (= (a/action! :test #(println "test")) (a/action! :test #(println "test")))
          "Same action should be equal")
      (is (not= (a/action! :test1 #(println "test")) (a/action! :test2 #(println "test")))
          "Different action ids should be not equal")))

  (testing "Sequential side effects"
    (let [events (atom [])
          record-event (fn [x] #(swap! events conj x))
          {:keys [side-effects]} ((.-prepare
                                   (a/seq
                                    (a/action! 0 (record-event :first))
                                    (a/action! 1 (record-event :second)))) nil nil)]
      (is (empty? @events))
      (is (empty? (side-effects [0.0 0.25])))
      (let [actions (side-effects [0.0 0.5])]
        (is (= (count actions) 1))
        ((first actions)))
      (is (= @events [:first]))
      (let [actions (side-effects [0.5 1.0])]
        (is (= (count actions) 1))
        ((first actions)))
      (is (= @events [:first :second]))))

  (testing "Parallel side effects"
    (let [events (atom [])
          record-event (fn [x] #(swap! events conj x))
          {:keys [side-effects]} ((.-prepare
                                   (a/par
                                    :a (a/action! :a (record-event :a))
                                    :b (a/action! :b (record-event :b)))) nil nil)]
      (is (empty? @events))
      (let [actions (side-effects [0.0 1.0])]
        (is (= (count actions) 2))
        (doseq [action actions] (action)))
      (is (= (set @events) #{:a :b}))))

  (testing "Side effects with curves"
    (let [events (atom [])
          record-event (fn [x] #(swap! events conj x))
          {:keys [side-effects]} ((.-prepare
                                   (a/with {:curve :ease-in}
                                           (a/action! 0 (record-event :curved)))) nil nil)]
      (is (empty? @events))
      (is (empty? (side-effects [0.0 0.5])))
      (let [actions (side-effects [0.5 1.0])]
        (is (= (count actions) 1))
        ((first actions)))
      (is (= @events [:curved]))))

  (testing "Repeated side effects"
    (let [events (atom [])
          record-event (fn [x] #(swap! events conj x))
          {:keys [side-effects]} ((.-prepare
                                   (a/repeat 2 (a/action! 0 (record-event :repeat)))) nil nil)]
      (is (empty? @events))
      (let [actions (side-effects [0.0 0.5])]
        (is (= (count actions) 1))
        ((first actions)))
      (is (= @events [:repeat]))
      (let [actions (side-effects [0.5 1.0])]
        (is (= (count actions) 1))
        ((first actions)))
      (is (= @events [:repeat :repeat]))))

  (testing "Autoreversed side effects"
    (let [events (atom [])
          record-event (fn [x] #(swap! events conj x))
          {:keys [side-effects]} ((.-prepare
                                   (a/autoreverse (a/action! 0 (record-event :auto)))) nil nil)]
      (is (empty? @events))
      (let [actions (side-effects [0.0 0.5])]
        (is (= (count actions) 1))
        ((first actions)))
      (is (= @events [:auto]))
      (let [actions (side-effects [0.5 1.0])]
        (is (= (count actions) 1))
        ((first actions)))
      (is (= @events [:auto :auto])))))

(deftest test-curves
  (testing "Constant curve"
    (let [curve (c/constant 0.5)]
      (is (= (.transform curve 0.0) 0.5))
      (is (= (.transform curve 0.5) 0.5))
      (is (= (.transform curve 1.0) 0.5))))

  (testing "Reversed curve"
    (let [curve (c/reversed :ease-in)]
      (is (= (.transform curve 0.0) 1.0))
      (is (< (.transform curve 0.5) 0.5))
      (is (= (.transform curve 1.0) 0.0))))

  (testing "Inversed curve"
    (let [curve (c/inversed :ease-in)]
      (is (= (.transform curve 0.0) 1.0))
      (is (> (.transform curve 0.5) 0.5))
      (is (= (.transform curve 1.0) 0.0))))

  (testing "Autoreversed curve"
    (let [curve (c/autoreversed :ease-in)]
      (is (= (.transform curve 0.0) 0.0))
      (is (< (.transform curve 0.25) 0.5) "First half ease-in")
      (is (= (.transform curve 0.5) 1.0))
      (is (< (.transform curve 0.75) 0.5) "Second half ease-in reversed")
      (is (= (.transform curve 1.0) 0.0))))

  (testing "Repeated curve"
    (let [curve (c/repeat 2 :ease-in)]
      (is (= (.transform curve 0.0) 0.0))
      (is (< (.transform curve 0.25) 0.5) "First iteration ease-in")
      (is (= (.transform curve 0.5) 0.0))
      (is (< (.transform curve 0.75) 0.5) "Second iteration ease-in")
      (is (= (.transform curve 1.0) 1.0))))

  (testing "Concatenated curves"
    (let [curve (c/concat :ease-in :ease-out)]
      (is (= (.transform curve 0.0) 0.0))
      (is (< (.transform curve 0.25) 0.5) "First half ease-in")
      (is (> (.transform curve 0.75) 0.5) "Second half ease-out")
      (is (= (.transform curve 1.0) 1.0))))

  (testing "Average of curves"
    (let [curve (c/average :ease-in :ease-out)]
      (is (= (.transform curve 0.0) 0.0))
      (is (= (.transform curve 0.5) 0.5) "Should be linear at midpoint")
      (is (= (.transform curve 1.0) 1.0))))

  (testing "Multiply curves"
    (let [curve (c/multiply :ease-in :ease-out)]
      (is (= (.transform curve 0.0) 0.0))
      (is (< (.transform curve 0.5) 0.25) "Product should be less than either curve")
      (is (= (.transform curve 1.0) 1.0))))

  (testing "Segment"
    (let [curve (c/segment 0.25 0.75 :ease-in)]
      (is (= (.transform curve 0.0) 0.0))
      (is (= (.transform curve 0.25) 0.0))
      (is (< (.transform curve 0.5) 0.5))
      (is (= (.transform curve 0.75) 1.0))
      (is (= (.transform curve 1.0) 0.0)))))

(deftest test-tile
  (testing "Basic tile functionality"
    (let [anim (unwrap (a/tile (a/to 0 100)))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 25))
      (is (= (anim 0.5) 50))
      (is (= (anim 0.75) 75))
      (is (= (anim 1) 100))
      (is (= (.toString (a/tile (a/to 0 100)))
             "(tile (to 0 100))"))
      (is (= (a/tile (a/to 0 100)) (a/tile (a/to 0 100)))
          "Same tile motion should be equal")
      (is (not= (a/tile (a/to 0 100)) (a/tile (a/to 0 200)))
          "Different values should be not equal")))

  (testing "Tiling with parent duration"
    (let [anim (unwrap (a/seq {:duration 2000}
                              (a/tile (->> (a/to 0 100) (a/duration 500)))))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 100))
      (is (= (anim 0.5) 100))
      (is (= (anim 0.75) 100))
      (is (= (anim 1) 100)))))

(deftest test-motion-controller
  (testing "Basic controller functionality"
    (let [vsync (ft/TestVSync)
          controller (a/motion-controller vsync percents)]
      (is (= (.-value controller) 0) "Initial value should be 0")
      (is (= (a/progress controller) 0.0) "Initial progress should be 0")

      (a/progress! controller 0.5)
      (is (= (.-value controller) 50) "Value should update with progress")
      (is (= (a/progress controller) 0.5) "Progress should be updated")

      (.dispose controller)))

  (testing "Setting motions"
    (let [vsync (ft/TestVSync)
          controller (a/motion-controller vsync (a/to 0))
          new-motion (a/to 0 200)]

      (a/set-motion! controller new-motion)
      (a/progress! controller 0.5)
      (is (= (.-value controller) 100) "Value should reflect new motion")

      (.dispose controller)))

  (testing "Motion computation"
    (let [vsync (ft/TestVSync)
          controller (a/motion-controller
                      vsync
                      (a/seq (a/to 0 50) (a/to 100)))]

      (a/progress! controller 0.4)
      (is (= (.-value controller) 40) "First segment")

      (a/progress! controller 0.75)
      (is (= (.-value controller) 75) "Final segment")

      (.dispose controller))))
