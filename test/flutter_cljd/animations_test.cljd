(ns flutter-cljd.animations-test
  (:require [clojure.test :refer [deftest is testing]]
            [flutter-cljd.curves :as c]
            [flutter-cljd.animations :as a]))

(defn- unwrap
  ([animation] (unwrap nil animation nil))
  ([animation duration] (if (fn? animation) (unwrap nil animation duration) (unwrap animation duration nil)))
  ([value animation duration]
   (let [animation (:prepare-motion animation)
         interpolate (:interpolate (animation
                                    value
                                    (or duration (:duration (animation value nil)) 250)))]
     (fn [t] (:value (interpolate (double t) {:prev-t (* 0.99 t)}))))))

(def ^:private percents
  (a/into-motion
   (fn [_ duration]
     {:duration duration
      :interpolate (fn [t cache]
                     {:value (int (* 100 t))
                      :cache cache})})))

(deftest test-to
  (testing "Single value"
    (let [anim (unwrap (a/to 100))]
      (is (= (anim 0) 100))
      (is (= (anim 0.5) 100))
      (is (= (anim 1) 100))))

  (testing "Valid between two values"
    (let [anim (unwrap (a/to 0 100))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 25))
      (is (= (anim 0.5) 50))
      (is (= (anim 0.75) 75))
      (is (= (anim 1) 100))))

  (testing "Valid between two non zero values"
    (let [anim (unwrap (a/to 50 100))]
      (is (= (anim 0) 50))
      (is (= (anim 0.25) 63))
      (is (= (anim 0.5) 75))
      (is (= (anim 0.75) 88))
      (is (= (anim 1) 100))))

  (testing "Valid between many values"
    (let [anim (unwrap (a/to 0 100 200 300 400 500))]
      (is (= (anim 0) 0))
      (is (= (anim 0.2) 100))
      (is (= (anim 0.4) 200))
      (is (= (anim 0.6) 300))
      (is (= (anim 0.8) 400))
      (is (= (anim 1) 500))))

  (testing "With initial value"
    (let [anim (unwrap 100 (a/to 200))]
      (is (= (anim 0) 100))
      (is (= (anim 0.5) 150))
      (is (= (anim 1) 200)))))

(deftest test-with
  (testing "Duration option"
    (let [anim ((:prepare-motion (a/with :duration 100 percents)) nil nil)]
      (is (= (.-inMilliseconds (:duration anim)) 100))))

  (testing "Start time option"
    (let [anim (unwrap (a/with {:delay 500 :duration 1000} percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 0))  ; Before start
      (is (= (anim 0.5) 25))  ; After start
      (is (= (anim 0.75) 62)) ; Mid-animation
      (is (= (anim 1) 100)))) ; End

  (testing "Duration ratio option"
    (let [anim (unwrap (a/with {:relative-duration 0.5} percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 25))
      (is (= (anim 0.5) 50))
      (is (= (anim 0.75) 75))
      (is (= (anim 1) 100))))

  (testing "Start time ratio option"
    (let [anim (unwrap (a/with :rel-delay 0.5 :rel-dur 0.5 percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 0))
      (is (= (anim 0.75) 50))
      (is (= (anim 1) 100))))

  (testing "Curve option"
    (let [anim (unwrap (a/with {:curve (constantly 0)} percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 0))
      (is (= (anim 1) 0))))

  (testing "Curve :ease-in option"
    (let [anim (unwrap (a/with {:curve :ease-in} percents))]
      (is (= (anim 0) 0))
      (is (< (anim 0.5) 50))
      (is (= (anim 1) 100))))

  (testing "Combined options"
    (let [anim (unwrap (a/with {:duration 1000
                                :delay 500
                                :curve :ease-in-out}
                               percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 0))
      (is (not= (anim 0.75) 50)) ; Should not be linear due to ease-in-out
      (is (= (anim 1) 100))))

  (testing "Nested with"
    (let [anim (unwrap (a/with :dur 1000 (a/with :rel-dur 0.5 (a/with :curve :ease-in percents))))]
      (is (= (anim 0) 0))
      (is (< (anim 0.5) 50) "Should be affected by ease-in")
      (is (= (anim 1) 100)))

    (let [anim (unwrap (a/with {:duration 1000}
                               (a/with {:relative-delay 0.5}
                                       (a/with {:relative-duration 0.5}
                                               percents))))]
      (is (= (anim 0) 0))
      (is (= (anim 0.4) 0) "Should not start before relative-delay")
      (is (= (anim 0.5) 0) "Should start at relative-delay")
      (is (= (anim 0.75) 50))
      (is (= (anim 1) 100)))))

(deftest test-repeat
  (testing "Basic repeat functionality"
    (let [base-dur 1000
          repeated (:prepare-motion (a/repeat 2 (a/with {:duration base-dur} percents)))
          {:keys [duration]} (repeated nil nil)]
      (is (= (.-inMilliseconds duration) (* base-dur 2)) "Duration should be doubled")

      (let [repeated (a/repeat 2 (a/with {:duration base-dur} percents))
            anim (unwrap repeated)]
        (is (= (anim 0) 0))
        (is (= (anim 0.25) 50))  ; First iteration at 50%
        (is (= (anim 0.5) 0))    ; Start of second iteration
        (is (= (anim 0.75) 50))  ; Second iteration at 50%
        (is (= (anim 1) 100)))))  ; End

  (testing "Zero or negative count"
    (let [anim (unwrap 0 (a/repeat 0 percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 0))
      (is (= (anim 1) 0)))

    (let [anim (unwrap 0 (a/repeat -1 percents))]
      (is (= (anim 0) 0))
      (is (= (anim 0.5) 0))
      (is (= (anim 1) 0)))))

(deftest test-autoreverse
  (testing "Basic autoreverse functionality"
    (let [base-dur 1000
          reversed (:prepare-motion (a/autoreverse (a/with {:duration base-dur} percents)))
          {:keys [duration]} (reversed nil nil)]
      (is (= (.-inMilliseconds duration) (* base-dur 2)) "Duration should be doubled")

      (let [reversed (a/autoreverse (a/with {:duration base-dur} percents))
            anim (unwrap reversed)]
        (is (= (anim 0) 0))      ; Start
        (is (= (anim 0.25) 50))  ; Forward halfway
        (is (= (anim 0.5) 100))  ; Forward complete
        (is (= (anim 0.75) 50))  ; Reverse halfway
        (is (= (anim 1) 0))))))    ; Back to start

(deftest test-par
  (testing "Basic parallel animation"
    (let [anim (unwrap (a/par
                        :color (a/to 0 100)
                        :offset (a/to 200 300)))]
      (is (= (anim 0) {:color 0 :offset 200}))
      (is (= (anim 0.5) {:color 50 :offset 250}))
      (is (= (anim 1) {:color 100 :offset 300}))))

  (testing "With different durations"
    (let [anim (unwrap (a/par
                        :fast (a/with {:relative-duration 0.5} (a/to 0 100))
                        :slow (a/to 0 100)))]
      (is (= (anim 0) {:fast 0 :slow 0}))
      (is (= (anim 0.5) {:fast 100 :slow 50}))
      (is (= (anim 1) {:fast 100 :slow 100}))))

  (testing "Nested parallel animations"
    (let [anim (unwrap (a/par
                        :outer (a/to 0 100)
                        :inner (a/par
                                :x (a/to 0 10)
                                :y (a/to 0 20))))]
      (is (= (anim 0) {:outer 0 :inner {:x 0 :y 0}}))
      (is (= (anim 0.5) {:outer 50 :inner {:x 5 :y 10}}))
      (is (= (anim 1) {:outer 100 :inner {:x 10 :y 20}}))))

  (testing "With options"
    (let [anim (unwrap (a/par
                        {:duration 1000}
                        :a (a/to 0 100)
                        :b (a/with {:relative-duration 0.5} (a/to 0 50))))]
      (is (= (anim 0) {:a 0 :b 0}))
      (is (= (anim 0.5) {:a 50 :b 50}))
      (is (= (anim 1) {:a 100 :b 50}))))

  (testing "Duration computation"
    (let [anim1 (:prepare-motion
                 (a/par
                  :a (a/with {:duration 1000} (a/to 0 100))
                  :b (a/with {:duration 2000} (a/to 0 100))))
          {:keys [duration]} (anim1 nil nil)]
      (is (= (.-inMilliseconds duration) 2000) "Should use longest child duration"))

    (let [anim2 (:prepare-motion
                 (a/par
                  :a (a/with {:relative-duration 0.5} (a/to 0 100))
                  :b (a/with {:relative-duration 0.7} (a/to 0 100))))
          {:keys [duration]} (anim2 nil nil)]
      (is (nil? duration) "Should not compute duration from ratios alone"))

    (let [anim3 (:prepare-motion
                 (a/par {:duration 1000}
                        :a (a/with {:duration 500} (a/to 0 100))
                        :b (a/with {:duration 2000} (a/to 0 100))))
          {:keys [duration]} (anim3 nil nil)]
      (is (= (.-inMilliseconds duration) 2000) "Should use max of parent and children durations"))))

(deftest test-seq
  (testing "Basic sequential animation"
    (let [anim (unwrap (a/seq
                        (a/to 0 50)
                        (a/to 100)))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 25))
      (is (= (anim 0.5) 50))
      (is (= (anim 0.75) 75))
      (is (= (anim 1) 100))))

  (testing "With different durations"
    (let [anim (unwrap (a/seq
                        (->> (a/to 0 50) (a/duration 25))
                        (->> 100 (a/duration 75))))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 50))
      (is (= (anim 0.5) 67))
      (is (= (anim 0.75) 83))
      (is (= (anim 1) 100))))

  (testing "With different relative durations"
    (let [anim (unwrap (a/seq
                        0
                        (->> 50 (a/relative-duration 0.25))
                        100))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 50))
      (is (= (anim 0.5) 67))
      (is (= (anim 0.75) 83))
      (is (= (anim 1) 100))))

  (testing "With mixed durations"
    (let [anim (unwrap
                (a/seq
                 0
                 (->> 50 (a/duration 25))
                 (->> 100 (a/relative-duration 0.75))))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 50))
      (is (= (anim 0.5) 67))
      (is (= (anim 0.75) 83))
      (is (= (anim 1) 100))))

  (testing "With initial value map"
    (let [anim (unwrap (a/seq
                        {:x 0 :y 0}
                        (a/par
                         :x (a/to 100)
                         :y (a/to 200))))]
      (is (= (anim 0) {:x 0 :y 0}))
      (is (= (anim 0.5) {:x 50 :y 100}))
      (is (= (anim 1) {:x 100 :y 200}))))

  (testing "Nested sequences"
    (let [anim (unwrap (a/seq 0 33 (a/seq 50 67) 100))]
      (is (= (anim 0) 0))
      (is (= (anim 0.25) 25))
      (is (= (anim 0.5) 50))
      (is (= (anim 0.67) 67))
      (is (= (anim 0.75) 75))
      (is (= (anim 1) 100))))

  (testing "With options"
    (let [anim (unwrap (a/seq
                        :duration 1000 :curve :ease-in
                        (a/to 0 50)
                        (a/to 50 100)))]
      (is (= (anim 0) 0))
      (is (< (anim 0.25) 25) "Should be affected by ease-in")
      (is (< (anim 0.75) 75) "Should be affected by ease-in")
      (is (= (anim 1) 100))))

  (testing "Duration computation"
    (let [anim1 (:prepare-motion
                 (a/seq
                  (a/duration 1000 (a/to 0 50))
                  (a/duration 2000 (a/to 50 100))))
          {:keys [duration]} (anim1 nil nil)]
      (is (= (.-inMilliseconds duration) 3000) "Should sum child durations"))

    (let [anim2 (:prepare-motion
                 (a/seq {:duration 5000}
                        (a/with {:relative-duration 0.2} (a/to 0 50 ))
                        (a/with {:relative-duration 0.8} (a/to 50 100))))
          {:keys [duration]} (anim2 nil nil)]
      (is (= (.-inMilliseconds duration) 5000) "Should use parent duration"))))

(deftest test-actions
  (testing "action! in sequence"
    (let [calls (atom [])
          anim (unwrap (a/seq
                        (a/to 10)
                        (a/action! #(swap! calls conj :action))
                        (a/to 20)))]
      (is (= (anim 0) 10))
      (is (empty? @calls))
      (is (= (anim 0.501) 20))
      (is (= @calls [:action]))
      (is (= (anim 1) 20))
      (is (= @calls [:action]))))

  (testing "action-with!"
    (let [received (atom nil)
          anim (unwrap (a/action-with! #(reset! received %)))]
      (is (= (anim 0) nil))
      (is (nil? @received))
      (is (= (anim 1) nil))
      (is (nil? @received))))

  (testing "action-with! in sequence"
    (let [received (atom [])
          anim (unwrap (a/seq
                        (a/to 0 10)
                        (a/action-with! #(swap! received conj %))
                        (a/to 20)))]
      (is (= (anim 0) 0))
      (is (empty? @received))
      (is (= (anim 0.501) 10))
      (is (= @received [10]))
      (is (= (anim 1) 20))
      (is (= @received [10])))))

(deftest test-actions
  (testing "action!"
    (let [called (atom false)
          anim (unwrap (a/action! #(reset! called true)))]
      (is (= (anim 0) nil))
      (is (false? @called))
      (is (= (anim 1) nil))
      (is (true? @called))))

  (testing "action! in sequence"
    (let [calls (atom [])
          anim (unwrap (a/seq
                        (a/to 0 10)
                        (a/action! #(swap! calls conj :action))
                        (a/to 20)))]
      (is (= (anim 0) 0))
      (is (empty? @calls))
      (is (= (anim 0.501) 10))
      (is (= @calls [:action]))
      (is (= (anim 1) 20))))

  (testing "action-with!"
    (let [received (atom nil)
          anim (unwrap (a/action-with! #(reset! received %)))]
      (is (= (anim 0) nil))
      (is (nil? @received))
      (is (= (anim 1.01) nil))
      (is (= @received nil))))

  (testing "action-with! in sequence"
    (let [received (atom [])
          anim (unwrap (a/seq
                        (a/to 0 10)
                        (a/action-with! #(swap! received conj %))
                        (a/to 20)))]
      (is (= (anim 0) 0))
      (is (empty? @received))
      (is (= (anim 0.501) 10))
      (is (= @received [10]))
      (is (= (anim 1) 20))
      (is (= @received [10])))))

(deftest test-curves
  (testing "Constant curve"
    (let [curve (c/constant 0.5)]
      (is (= (.transform curve 0.0) 0.5))
      (is (= (.transform curve 0.5) 0.5))
      (is (= (.transform curve 1.0) 0.5))))

  (testing "Reversed curve"
    (let [curve (c/reversed :ease-in)]
      (is (= (.transform curve 0.0) 1.0))
      (is (< (.transform curve 0.5) 0.5))
      (is (= (.transform curve 1.0) 0.0))))

  (testing "Inversed curve"
    (let [curve (c/inversed :ease-in)]
      (is (= (.transform curve 0.0) 1.0))
      (is (> (.transform curve 0.5) 0.5))
      (is (= (.transform curve 1.0) 0.0))))

  (testing "Autoreversed curve"
    (let [curve (c/autoreversed :ease-in)]
      (is (= (.transform curve 0.0) 0.0))
      (is (< (.transform curve 0.25) 0.5) "First half ease-in")
      (is (= (.transform curve 0.5) 1.0))
      (is (< (.transform curve 0.75) 0.5) "Second half ease-in reversed")
      (is (= (.transform curve 1.0) 0.0))))

  (testing "Repeated curve"
    (let [curve (c/repeat 2 :ease-in)]
      (is (= (.transform curve 0.0) 0.0))
      (is (< (.transform curve 0.25) 0.5) "First iteration ease-in")
      (is (= (.transform curve 0.5) 0.0))
      (is (< (.transform curve 0.75) 0.5) "Second iteration ease-in")
      (is (= (.transform curve 1.0) 1.0))))

  (testing "Concatenated curves"
    (let [curve (c/concat :ease-in :ease-out)]
      (is (= (.transform curve 0.0) 0.0))
      (is (< (.transform curve 0.25) 0.5) "First half ease-in")
      (is (> (.transform curve 0.75) 0.5) "Second half ease-out")
      (is (= (.transform curve 1.0) 1.0))))

  (testing "Average of curves"
    (let [curve (c/average :ease-in :ease-out)]
      (is (= (.transform curve 0.0) 0.0))
      (is (= (.transform curve 0.5) 0.5) "Should be linear at midpoint")
      (is (= (.transform curve 1.0) 1.0))))

  (testing "Multiply curves"
    (let [curve (c/multiply :ease-in :ease-out)]
      (is (= (.transform curve 0.0) 0.0))
      (is (< (.transform curve 0.5) 0.25) "Product should be less than either curve")
      (is (= (.transform curve 1.0) 1.0))))

  (testing "Segment"
    (let [curve (c/segment 0.25 0.75 :ease-in)]
      (is (= (.transform curve 0.0) 0.0))
      (is (= (.transform curve 0.25) 0.0))
      (is (< (.transform curve 0.5) 0.5))
      (is (= (.transform curve 0.75) 1.0))
      (is (= (.transform curve 1.0) 0.0)))))
