(ns flutter-cljd.widgets-test
  (:require [clojure.test :refer [deftest is testing]]
            [flutter-cljd.types :as t]
            [flutter-cljd.widgets :as f]
            ["package:flutter/material.dart" :as m]
            ["package:flutter/services.dart" :as s]))

(deftest test-absorb-pointer
  (testing "Absorb pointer with absorbing set to true"
    (let [child (m/Text "Child widget")
          widget (f/absorb-pointer true child)]
      (is (= (.-absorbing widget) true))
      (is (instance? m/Text (.-child widget)))))

  (testing "Absorb pointer with absorbing set to false"
    (let [child (m/Text "Child widget")
          widget (f/absorb-pointer false child)]
      (is (= (.-absorbing widget) false))
      (is (instance? m/Text (.-child widget)))))

  (testing "Absorb pointer defaulting to true"
    (let [child (m/Text "Child widget")
          widget (f/absorb-pointer child)]
      (is (= (.-absorbing widget) true))
      (is (instance? m/Text (.-child widget))))))

(deftest test-ignore-pointer
  (testing "Ignore pointer with ignoring set to true"
    (let [child (m/Text "Child widget")
          widget (f/ignore-pointer true child)]
      (is (= (.-ignoring widget) true))
      (is (instance? m/Text (.-child widget)))))

  (testing "Ignore pointer with ignoring set to false"
    (let [child (m/Text "Child widget")
          widget (f/ignore-pointer false child)]
      (is (= (.-ignoring widget) false))
      (is (instance? m/Text (.-child widget)))))

  (testing "Ignore pointer defaulting to true"
    (let [child (m/Text "Child widget")
          widget (f/ignore-pointer child)]
      (is (= (.-ignoring widget) true))
      (is (instance? m/Text (.-child widget))))))

(deftest test-align
  (testing "Align with a keyword alignment"
    (let [child (m/Text "Child widget")
          widget (f/align {:alignment :bottom-right} child)]
      (is (= (.-alignment widget) m/Alignment.bottomRight))
      (is (instance? m/Text (.-child widget)))))

  (testing "Align with width and height factors"
    (let [child (m/Text "Child widget")
          widget (f/align {:alignment :center :width-factor 0.5 :height-factor 0.3} child)]
      (is (= (.-alignment widget) m/Alignment.center))
      (is (= (.-widthFactor widget) 0.5))
      (is (= (.-heightFactor widget) 0.3))
      (is (instance? m/Text (.-child widget)))))

  (testing "Align with animated alignment options"
    (let [child (m/Text "Child widget")
          widget (f/align {:alignment :top-right
                           :animation {:dur 500 :curve :ease-in}} child)]
      (is (= (.-alignment widget) m/Alignment.topRight))
      (is (= (.-inMilliseconds (.-duration widget)) 500))
      (is (= (.-curve widget) m/Curves.easeIn))
      (is (instance? m/Text (.-child widget)))))

  (testing "Align with animated transition"
    (let [animation (m/AlwaysStoppedAnimation m/Alignment.center)
          child (m/Text "Child widget")
          widget (f/align {:alignment animation} child)]
      (is (instance? m/AlignTransition widget))
      (is (= (.-alignment widget) animation))
      (is (instance? m/Text (.-child widget))))))

(deftest test-aspect-ratio
  (testing "Aspect ratio widget"
    (let [child (m/Text "Child widget")
          widget (f/aspect-ratio 16/9 child)]
      (is (= (.-aspectRatio widget) (/ 16.0 9.0)))
      (is (instance? m/Text (.-child widget))))))

(deftest test-with-autocomplete-highlighted-index
  (testing "Autocomplete highlighted option widget"
    (let [option (#/(m/ValueNotifier int) 0)
          child (m/Text "Child widget")
          widget (f/with-autocomplete-highlighted-index option child)]
      (is (instance? m/Text (.-child widget))))))

(deftest test-autofill-group
  (testing "Autofill group widget"
    (let [child (m/Text "Child widget")
          widget (f/autofill-group :commit child)]
      (is (instance? m/Text (.-child widget)))
      (is (= (.-onDisposeAction widget) m/AutofillContextAction.commit))))

  (testing "Autofill group with custom action"
    (let [action m/AutofillContextAction.commit
          child (m/Text "Child widget")
          widget (f/autofill-group action child)]
      (is (instance? m/Text (.-child widget)))
      (is (= (.-onDisposeAction widget) action)))))

(deftest test-keep-alive
  (testing "Keep alive widget with auto"
    (let [child (m/Text "Child widget")
          widget (f/keep-alive :auto child)]
      (is (instance? m/AutomaticKeepAlive widget))
      (is (instance? m/Text (.-child widget)))))

  (testing "Keep alive widget with true"
    (let [child (m/Text "Child widget")
          widget (f/keep-alive true child)]
      (is (= (.-keepAlive widget) true))
      (is (instance? m/Text (.-child widget)))))

  (testing "Keep alive widget with false"
    (let [child (m/Text "Child widget")
          widget (f/keep-alive false child)]
      (is (= (.-keepAlive widget) false))
      (is (instance? m/Text (.-child widget))))))

(deftest test-on-back-button
  (testing "On back button widget"
    (let [child (m/Text "Child widget")
          widget (f/on-back-button #(println "Pressed") child)]
      (is (instance? m/Text (.-child widget))))))

(deftest test-banner
  (testing "Banner widget"
    (let [args {:message "Banner message"}
          child (m/Text "Child widget")
          widget (f/banner args child)]
      (is (= (.-message widget) "Banner message"))
      (is (instance? m/Text (.-child widget)))))

  (testing "Banner widget with key"
    (let [args {:message "Banner message" :key "banner-key"}
          child (m/Text "Child widget")
          widget (f/banner args child)]
      (is (= (.-value (.-key widget)) "banner-key"))
      (is (= (.-message widget) "Banner message"))
      (is (instance? m/Text (.-child widget))))))

(deftest test-baseline
  (testing "Baseline widget"
    (let [child (m/Text "Child widget")
          widget (f/baseline 20 m/TextBaseline.alphabetic child)]
      (is (= (.-baseline widget) 20.0))
      (is (= (.-baselineType widget) m/TextBaseline.alphabetic))
      (is (instance? m/Text (.-child widget))))))

(deftest test-block-semantics
  (testing "Block semantics widget"
    (let [child (m/Text "Child widget")
          widget (f/block-semantics true child)]
      (is (= (.-blocking widget) true))
      (is (instance? m/Text (.-child widget)))))

  (testing "Block semantics widget default"
    (let [child (m/Text "Child widget")
          widget (f/block-semantics child)]
      (is (= (.-blocking widget) true))
      (is (instance? m/Text (.-child widget))))))

(deftest test-bottom-navigation-bar-item
  (testing "Bottom navigation bar item with basic properties"
    (let [icon (m/Icon m/Icons.home)
          widget (f/bottom-navigation-bar-item {:icon icon :label "Home"})]
      (is (= (.-label widget) "Home"))
      (is (= (-> widget .-icon .-icon) (.-icon icon)))))

  (testing "Bottom navigation bar item with all properties"
    (let [icon (m/Icon m/Icons.home)
          active-icon (m/Icon m/Icons.home_filled)
          widget (f/bottom-navigation-bar-item
                  {:icon icon
                   :active-icon active-icon
                   :label "Home"
                   :background-color :blue
                   :tooltip "Home Page"})]
      (is (= (-> widget .-icon .-icon) (.-icon icon)))
      (is (= (-> widget .-activeIcon .-icon) (.-icon active-icon)))
      (is (= (.-label widget) "Home"))
      (is (= (.-backgroundColor widget) (t/color :blue)))
      (is (= (.-tooltip widget) "Home Page")))))

(deftest test-builder
  (testing "Builder with context only"
    (let [widget (f/builder (fn [ctx] (m/Text "Built")))]
      (is (instance? m/Builder widget))))

  (testing "Builder with child and context"
    (let [child (m/Text "Child")
          widget (f/builder (fn [c ctx] (m/Container .child c)) child)]
      (is (instance? m/Builder widget)))))

(deftest test-center
  (testing "Center with default properties"
    (let [child (m/Text "Child")
          widget (f/center child)]
      (is (instance? m/Center widget))
      (is (instance? m/Text (.-child widget)))))

  (testing "Center with width and height factors"
    (let [child (m/Text "Child")
          widget (f/center {:width-factor 2.0 :height-factor 1.5} child)]
      (is (= (.-widthFactor widget) 2.0))
      (is (= (.-heightFactor widget) 1.5))
      (is (instance? m/Text (.-child widget))))))

(deftest test-column
  (testing "Column with default properties"
    (let [child (m/Text "Child")
          widget (f/column child)]
      (is (instance? m/Column widget))
      (is (= (count (.-children widget)) 1))))

  (testing "Column with spacing and alignment"
    (let [widget (f/column
                  {:spacing 10
                   :main-axis-alignment :center
                   :cross-axis-alignment :start}
                  (m/Text "First")
                  (m/Text "Second"))]
      (is (= (.-spacing widget) 10.0))
      (is (= (.-mainAxisAlignment widget) m/MainAxisAlignment.center))
      (is (= (.-crossAxisAlignment widget) m/CrossAxisAlignment.start))
      (is (= (count (.-children widget)) 2)))))

(deftest test-expanded
  (testing "Expanded with default flex"
    (let [child (m/Text "Child")
          widget (f/expanded child)]
      (is (instance? m/Expanded widget))
      (is (= (.-flex widget) 1))
      (is (instance? m/Text (.-child widget)))))

  (testing "Expanded with custom flex"
    (let [widget (f/expanded 2 (m/Text "Child"))]
      (is (= (.-flex widget) 2)))))

(deftest test-flex
  (testing "Flex with horizontal direction"
    (let [widget (f/flex :horizontal
                         {:spacing 10}
                         (m/Text "First")
                         (m/Text "Second"))]
      (is (instance? m/Flex widget))
      (is (= (.-direction widget) m/Axis.horizontal))
      (is (= (.-spacing widget) 10.0))
      (is (= (count (.-children widget)) 2))))

  (testing "Flex with vertical direction and alignment"
    (let [widget (f/flex :vertical
                         {:main-axis-alignment :space-between}
                         (m/Text "Top")
                         (m/Text "Bottom"))]
      (is (= (.-direction widget) m/Axis.vertical))
      (is (= (.-mainAxisAlignment widget) m/MainAxisAlignment.spaceBetween)))))

(deftest test-opacity
  (testing "Opacity with value only"
    (let [child (m/Text "Child")
          widget (f/opacity 0.5 child)]
      (is (instance? m/Opacity widget))
      (is (= (.-opacity widget) 0.5))
      (is (instance? m/Text (.-child widget))))))

(deftest test-padding
  (testing "Padding with number"
    (let [child (m/Text "Child")
          widget (f/padding 10 child)]
      (is (= (.-padding widget) (t/insets 10)))
      (is (instance? m/Text (.-child widget))))))

(deftest test-row
  (testing "Row with default properties"
    (let [child (m/Text "Child")
          widget (f/row child)]
      (is (instance? m/Row widget))
      (is (= (count (.-children widget)) 1))))

  (testing "Row with spacing and alignment"
    (let [widget (f/row
                  {:spacing 15
                   :main-axis-alignment :end
                   :cross-axis-alignment :center}
                  (m/Text "Left")
                  (m/Text "Right"))]
      (is (= (.-spacing widget) 15.0))
      (is (= (.-mainAxisAlignment widget) m/MainAxisAlignment.end))
      (is (= (.-crossAxisAlignment widget) m/CrossAxisAlignment.center))
      (is (= (count (.-children widget)) 2)))))

(deftest test-sized
  (testing "Sized with single number"
    (let [widget (f/sized 100)]
      (is (instance? m/ConstrainedBox widget))
      (is (= (-> widget .-constraints .-minWidth) 100.0))
      (is (= (-> widget .-constraints .-maxWidth) 100.0))))

  (testing "Sized with width and height"
    (let [widget (f/sized {:width 200 :height 150} (m/Text "Child"))]
      (is (= (-> widget .-constraints .-minWidth) 200.0))
      (is (= (-> widget .-constraints .-maxWidth) 200.0))
      (is (= (-> widget .-constraints .-minHeight) 150.0))
      (is (= (-> widget .-constraints .-maxHeight) 150.0)))))

(deftest test-spacer
  (testing "Spacer with default flex"
    (let [widget (f/spacer)]
      (is (instance? m/Spacer widget))
      (is (= (.-flex widget) 1))))

  (testing "Spacer with custom flex"
    (let [widget (f/spacer 2)]
      (is (= (.-flex widget) 2)))))

(deftest test-stack
  (testing "Stack with default properties"
    (let [widget (f/stack (m/Text "First") (m/Text "Second"))]
      (is (instance? m/Stack widget))
      (is (= (count (.-children widget)) 2))))

  (testing "Stack with alignment and fit"
    (let [widget (f/stack
                  {:alignment :center
                   :fit :expand}
                  (m/Text "Bottom")
                  (m/Text "Top"))]
      (is (= (.-alignment widget) m/Alignment.center))
      (is (= (.-fit widget) m/StackFit.expand))
      (is (= (count (.-children widget)) 2)))))

(deftest test-text
  (testing "Text with string only"
    (let [widget (f/text "Hello")]
      (is (instance? m/Text widget))
      (is (= (.-data widget) "Hello"))))

  (testing "Text with style"
    (let [widget (f/text "Hello" {:color :red :font-size 20})]
      (is (= (-> widget .-style .-color) (t/color :red)))
      (is (= (-> widget .-style .-fontSize) 20.0)))))

(deftest test-cross-axis-alignment
  (testing "Valid cross-axis alignments"
    (is (= (t/cross-axis-alignment :center) m/CrossAxisAlignment.center))
    (is (= (t/cross-axis-alignment :start) m/CrossAxisAlignment.start))
    (is (= (t/cross-axis-alignment :end) m/CrossAxisAlignment.end))
    (is (= (t/cross-axis-alignment :stretch) m/CrossAxisAlignment.stretch))
    (is (= (t/cross-axis-alignment :baseline) m/CrossAxisAlignment.baseline)))

  (testing "Passing an instance of CrossAxisAlignment"
    (is (= (t/cross-axis-alignment m/CrossAxisAlignment.start) m/CrossAxisAlignment.start)))

  (testing "Invalid cross-axis alignment"
    (is (thrown? Exception (t/cross-axis-alignment :invalid)))))

(deftest test-main-axis-alignment
  (testing "Valid main-axis alignments"
    (is (= (t/main-axis-alignment :center) m/MainAxisAlignment.center))
    (is (= (t/main-axis-alignment :start) m/MainAxisAlignment.start))
    (is (= (t/main-axis-alignment :end) m/MainAxisAlignment.end))
    (is (= (t/main-axis-alignment :space-between) m/MainAxisAlignment.spaceBetween))
    (is (= (t/main-axis-alignment :space-around) m/MainAxisAlignment.spaceAround)))

  (testing "Passing an instance of MainAxisAlignment"
    (is (= (t/main-axis-alignment m/MainAxisAlignment.spaceBetween) m/MainAxisAlignment.spaceBetween)))

  (testing "Invalid main-axis alignment"
    (is (thrown? Exception (t/main-axis-alignment :invalid)))))

(deftest logical-keyboard-key-test
  (testing "logical-keyboard-key"
    (let [key 0x00000000061]
      (is (= (-> s/LogicalKeyboardKey.keyA t/logical-keyboard-key .-keyId) key))
      (is (= (-> :a t/logical-keyboard-key .-keyId) key))
      (is (= (-> "A" t/logical-keyboard-key .-keyId) key))
      (is (= (-> "a" t/logical-keyboard-key  .-keyId) key))
      (is (= (-> key t/logical-keyboard-key .-keyId) key))
      (is (= (-> :shift t/logical-keyboard-key .-keyId) (.-keyId s/LogicalKeyboardKey.shift))))))

(deftest shortcut-activator-test
  (testing "shortcut-activator"
    (let [char-activator (m/CharacterActivator. "A")]
      (is (= (t/shortcut-activator char-activator) char-activator))
      (is (= (-> ["a"] t/shortcut-activator .-character) "a"))
      (is (true? (-> [:shift :a] t/shortcut-activator .-shift))))))
