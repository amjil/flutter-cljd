(ns flutter-cljd.widgets-test
  (:require [clojure.test :refer [deftest is testing]]
            [flutter-cljd.core :as c]
            [flutter-cljd.types :as t]
            [flutter-cljd.widgets :as f]
            ["package:flutter/material.dart" :as m]
            ["package:flutter/services.dart" :as s]))

(deftest test-absorb-pointer
  (testing "Absorb pointer with absorbing set to true"
    (let [child (m/Text "Child widget")
          widget (f/absorb-pointer true child)]
      (is (= (.-absorbing widget) true))
      (is (instance? m/Text (.-child widget)))))

  (testing "Absorb pointer with absorbing set to false"
    (let [child (m/Text "Child widget")
          widget (f/absorb-pointer false child)]
      (is (= (.-absorbing widget) false))
      (is (instance? m/Text (.-child widget)))))

  (testing "Absorb pointer defaulting to true"
    (let [child (m/Text "Child widget")
          widget (f/absorb-pointer child)]
      (is (= (.-absorbing widget) true))
      (is (instance? m/Text (.-child widget))))))

(deftest test-ignore-pointer
  (testing "Ignore pointer with ignoring set to true"
    (let [child (m/Text "Child widget")
          widget (f/ignore-pointer true child)]
      (is (= (.-ignoring widget) true))
      (is (instance? m/Text (.-child widget)))))

  (testing "Ignore pointer with ignoring set to false"
    (let [child (m/Text "Child widget")
          widget (f/ignore-pointer false child)]
      (is (= (.-ignoring widget) false))
      (is (instance? m/Text (.-child widget)))))

  (testing "Ignore pointer defaulting to true"
    (let [child (m/Text "Child widget")
          widget (f/ignore-pointer child)]
      (is (= (.-ignoring widget) true))
      (is (instance? m/Text (.-child widget))))))

(deftest test-align
  (testing "Align with a keyword alignment"
    (let [child (m/Text "Child widget")
          widget (f/align {:alignment :bottom-right} child)]
      (is (= (.-alignment widget) m/Alignment.bottomRight))
      (is (instance? m/Text (.-child widget)))))

  (testing "Align with width and height factors"
    (let [child (m/Text "Child widget")
          widget (f/align {:alignment :center :width-factor 0.5 :height-factor 0.3} child)]
      (is (= (.-alignment widget) m/Alignment.center))
      (is (= (.-widthFactor widget) 0.5))
      (is (= (.-heightFactor widget) 0.3))
      (is (instance? m/Text (.-child widget)))))

  (testing "Align with animated alignment options"
    (let [child (m/Text "Child widget")
          widget (f/align {:alignment :top-right
                         :animation {:duration 0.5 :curve :ease-in}} child)]
      (is (= (.-alignment widget) m/Alignment.topRight))
      (is (= (.-inMilliseconds (.-duration widget)) 500))
      (is (= (.-curve widget) m/Curves.easeIn))
      (is (instance? m/Text (.-child widget)))))

  (testing "Align with animated transition"
    (let [animation (m/AlwaysStoppedAnimation m/Alignment.center)
          child (m/Text "Child widget")
          widget (f/align {:alignment animation} child)]
      (is (instance? m/AlignTransition widget))
      (is (= (.-alignment widget) animation))
      (is (instance? m/Text (.-child widget))))))

(deftest test-aspect-ratio
  (testing "Aspect ratio widget"
    (let [child (m/Text "Child widget")
          widget (f/aspect-ratio 16/9 child)]
      (is (= (.-aspectRatio widget) (/ 16.0 9.0)))
      (is (instance? m/Text (.-child widget))))))

(deftest test-with-autocomplete-highlighted-index
  (testing "Autocomplete highlighted option widget"
    (let [option (#/(m/ValueNotifier int) 0)
          child (m/Text "Child widget")
          widget (f/with-autocomplete-highlighted-index option child)]
      (is (instance? m/Text (.-child widget))))))

(deftest test-autofill-group
  (testing "Autofill group widget"
    (let [child (m/Text "Child widget")
          widget (f/autofill-group :commit child)]
      (is (instance? m/Text (.-child widget)))
      (is (= (.-onDisposeAction widget) m/AutofillContextAction.commit))))

  (testing "Autofill group with custom action"
    (let [action m/AutofillContextAction.commit
          child (m/Text "Child widget")
          widget (f/autofill-group action child)]
      (is (instance? m/Text (.-child widget)))
      (is (= (.-onDisposeAction widget) action)))))

(deftest test-keep-alive
  (testing "Keep alive widget with auto"
    (let [child (m/Text "Child widget")
          widget (f/keep-alive :auto child)]
      (is (instance? m/AutomaticKeepAlive widget))
      (is (instance? m/Text (.-child widget)))))

  (testing "Keep alive widget with true"
    (let [child (m/Text "Child widget")
          widget (f/keep-alive true child)]
      (is (= (.-keepAlive widget) true))
      (is (instance? m/Text (.-child widget)))))

  (testing "Keep alive widget with false"
    (let [child (m/Text "Child widget")
          widget (f/keep-alive false child)]
      (is (= (.-keepAlive widget) false))
      (is (instance? m/Text (.-child widget))))))

(deftest test-on-back-button
  (testing "On back button widget"
    (let [child (m/Text "Child widget")
          widget (f/on-back-button #(println "Pressed") child)]
      (is (instance? m/Text (.-child widget))))))

(deftest test-banner
  (testing "Banner widget"
    (let [args {:message "Banner message"}
          child (m/Text "Child widget")
          widget (f/banner args child)]
      (is (= (.-message widget) "Banner message"))
      (is (instance? m/Text (.-child widget)))))

  (testing "Banner widget with key"
    (let [args {:message "Banner message" :key "banner-key"}
          child (m/Text "Child widget")
          widget (f/banner args child)]
      (is (= (.-value (.-key widget)) "banner-key"))
      (is (= (.-message widget) "Banner message"))
      (is (instance? m/Text (.-child widget))))))

(deftest test-baseline
  (testing "Baseline widget"
    (let [child (m/Text "Child widget")
          widget (f/baseline 20 m/TextBaseline.alphabetic child)]
      (is (= (.-baseline widget) 20.0))
      (is (= (.-baselineType widget) m/TextBaseline.alphabetic))
      (is (instance? m/Text (.-child widget))))))

(deftest test-block-semantics
  (testing "Block semantics widget"
    (let [child (m/Text "Child widget")
          widget (f/block-semantics true child)]
      (is (= (.-blocking widget) true))
      (is (instance? m/Text (.-child widget)))))

  (testing "Block semantics widget default"
    (let [child (m/Text "Child widget")
          widget (f/block-semantics child)]
      (is (= (.-blocking widget) true))
      (is (instance? m/Text (.-child widget))))))

(deftest test-cross-axis-alignment
  (testing "Valid cross-axis alignments"
    (is (= (t/cross-axis-alignment :center) m/CrossAxisAlignment.center))
    (is (= (t/cross-axis-alignment :start) m/CrossAxisAlignment.start))
    (is (= (t/cross-axis-alignment :end) m/CrossAxisAlignment.end))
    (is (= (t/cross-axis-alignment :stretch) m/CrossAxisAlignment.stretch))
    (is (= (t/cross-axis-alignment :baseline) m/CrossAxisAlignment.baseline)))

  (testing "Passing an instance of CrossAxisAlignment"
    (is (= (t/cross-axis-alignment m/CrossAxisAlignment.start) m/CrossAxisAlignment.start)))

  (testing "Invalid cross-axis alignment"
    (is (thrown? Exception (t/cross-axis-alignment :invalid)))))

(deftest test-main-axis-alignment
  (testing "Valid main-axis alignments"
    (is (= (t/main-axis-alignment :center) m/MainAxisAlignment.center))
    (is (= (t/main-axis-alignment :start) m/MainAxisAlignment.start))
    (is (= (t/main-axis-alignment :end) m/MainAxisAlignment.end))
    (is (= (t/main-axis-alignment :space-between) m/MainAxisAlignment.spaceBetween))
    (is (= (t/main-axis-alignment :space-around) m/MainAxisAlignment.spaceAround)))

  (testing "Passing an instance of MainAxisAlignment"
    (is (= (t/main-axis-alignment m/MainAxisAlignment.spaceBetween) m/MainAxisAlignment.spaceBetween)))

  (testing "Invalid main-axis alignment"
    (is (thrown? Exception (t/main-axis-alignment :invalid)))))

(deftest logical-keyboard-key-test
  (testing "logical-keyboard-key"
    (let [key 0x00000000061]
      (is (= (-> s/LogicalKeyboardKey.keyA t/logical-keyboard-key .-keyId) key))
      (is (= (-> :a t/logical-keyboard-key .-keyId) key))
      (is (= (-> "A" t/logical-keyboard-key .-keyId) key))
      (is (= (-> "a" t/logical-keyboard-key  .-keyId) key))
      (is (= (-> key t/logical-keyboard-key .-keyId) key))
      (is (= (-> :shift t/logical-keyboard-key .-keyId) (.-keyId s/LogicalKeyboardKey.shift))))))

(deftest shortcut-activator-test
  (testing "shortcut-activator"
    (let [char-activator (m/CharacterActivator. "A")]
      (is (= (t/shortcut-activator char-activator) char-activator))
      (is (= (-> ["a"] t/shortcut-activator .-character) "a"))
      (is (true? (-> [:shift :a] t/shortcut-activator .-shift))))))
